// src/components/ai/DailyBriefing.tsx
import React, { useState, useEffect } from 'react';
import { 
  Sun, 
  TrendingUp, 
  Target, 
  AlertTriangle, 
  CheckCircle, 
  Clock, 
  Brain,
  RefreshCw,
  Loader2,
  Zap,
  Globe
} from 'lucide-react';

interface DailyBriefingData {
  briefing: {
    greeting: string;
    todaysFocus: string;
    priorities: string[];
    insights: Array<{
      type: string;
      domain: string;
      title: string;
      description: string;
      confidence: number;
      urgency: string;
      actionable: boolean;
      suggestedActions: string[];
    }>;
    warnings: string[];
    energyRecommendations: string[];
    timelineAlerts: string[];
    contextualGuidance: string;
  };
  success: boolean;
  timestamp: string;
}

interface DailyBriefingProps {
  className?: string;
}

export default function DailyBriefing({ className = '' }: DailyBriefingProps) {
  const [briefingData, setBriefingData] = useState<DailyBriefingData | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const fetchBriefing = async () => {
    setIsLoading(true);
    setError(null);
    
    try {
      const response = await fetch('/api/ai/daily-briefing');
      const data = await response.json();
      
      if (data.success) {
        setBriefingData(data);
      } else {
        throw new Error(data.error || 'Failed to fetch briefing');
      }
    } catch (err) {
      console.error('Briefing fetch error:', err);
      setError(err instanceof Error ? err.message : 'Failed to load briefing');
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    fetchBriefing();
  }, []);

  const getTimeGreeting = () => {
    const hour = new Date().getHours();
    if (hour < 12) return 'Good morning';
    if (hour < 17) return 'Good afternoon';
    return 'Good evening';
  };

  const getInsightIcon = (type: string) => {
    switch (type) {
      case 'habit':
        return <Target className="w-5 h-5" />;
      case 'health':
        return <Brain className="w-5 h-5" />;
      case 'finance':
        return <TrendingUp className="w-5 h-5" />;
      case 'correlation':
        return <Brain className="w-5 h-5" />;
      default:
        return <AlertTriangle className="w-5 h-5" />;
    }
  };

  const getImpactColor = (impact: string) => {
    switch (impact) {
      case 'high':
        return 'border-red-200 bg-red-50 text-red-800';
      case 'medium':
        return 'border-yellow-200 bg-yellow-50 text-yellow-800';
      case 'low':
        return 'border-green-200 bg-green-50 text-green-800';
      default:
        return 'border-gray-200 bg-gray-50 text-gray-800';
    }
  };

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'high':
        return 'border-red-200 bg-red-50';
      case 'medium':
        return 'border-yellow-200 bg-yellow-50';
      case 'low':
        return 'border-green-200 bg-green-50';
      default:
        return 'border-gray-200 bg-gray-50';
    }
  };

  if (isLoading) {
    return (
      <div className={`bg-white rounded-lg shadow-lg p-6 ${className}`}>
        <div className="flex items-center justify-center h-64">
          <div className="text-center">
            <Loader2 className="w-8 h-8 animate-spin text-blue-500 mx-auto mb-4" />
            <p className="text-gray-600">Mesh is preparing your daily briefing...</p>
          </div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className={`bg-white rounded-lg shadow-lg p-6 ${className}`}>
        <div className="text-center">
          <AlertTriangle className="w-12 h-12 text-red-500 mx-auto mb-4" />
          <h3 className="text-lg font-semibold text-gray-900 mb-2">Unable to Load Briefing</h3>
          <p className="text-gray-600 mb-4">{error}</p>
          <button
            onClick={fetchBriefing}
            className="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg transition-colors flex items-center gap-2 mx-auto"
          >
            <RefreshCw className="w-4 h-4" />
            Try Again
          </button>
        </div>
      </div>
    );
  }

  if (!briefingData) {
    return null;
  }

  return (
    <div className={`bg-gradient-to-br from-blue-50 to-purple-50 rounded-lg shadow-lg ${className}`}>
      {/* Header */}
      <div className="p-6 border-b border-gray-200">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-3">
            <div className="w-12 h-12 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center">
              <Sun className="w-6 h-6 text-white" />
            </div>
            <div>
              <h2 className="text-xl font-bold text-gray-900">
                {getTimeGreeting()}! Here's your daily briefing
              </h2>
              <p className="text-sm text-gray-600">
                Generated by Mesh â€¢ {new Date(briefingData.timestamp).toLocaleString()}
              </p>
            </div>
          </div>
          <button
            onClick={fetchBriefing}
            className="p-2 text-gray-500 hover:text-gray-700 hover:bg-white rounded-lg transition-colors"
            title="Refresh briefing"
          >
            <RefreshCw className="w-5 h-5" />
          </button>
        </div>
      </div>

      <div className="p-6 space-y-6">
        {/* Main Briefing */}
        <div className="bg-white rounded-lg p-4 shadow-sm">
          <div className="flex items-center gap-2 mb-3">
            <Brain className="w-5 h-5 text-blue-600" />
            <h3 className="font-semibold text-gray-900">Your Daily Overview</h3>
          </div>
          <p className="text-gray-700 mb-4">{briefingData.briefing.greeting}</p>
          {briefingData.briefing.contextualGuidance && (
            <p className="text-sm text-gray-600 bg-blue-50 p-3 rounded-lg">
              ðŸ’¡ {briefingData.briefing.contextualGuidance}
            </p>
          )}
        </div>

        {/* Today's Focus */}
        <div className="bg-white rounded-lg p-4 shadow-sm border-l-4 border-blue-500">
          <div className="flex items-center gap-2 mb-2">
            <Target className="w-5 h-5 text-blue-600" />
            <h3 className="font-semibold text-gray-900">Today's Focus</h3>
          </div>
          <p className="text-gray-700 font-medium">{briefingData.briefing.todaysFocus}</p>
        </div>

        {/* Priorities */}
        {briefingData.briefing.priorities.length > 0 && (
          <div className="bg-white rounded-lg p-4 shadow-sm">
            <div className="flex items-center gap-2 mb-3">
              <CheckCircle className="w-5 h-5 text-green-600" />
              <h3 className="font-semibold text-gray-900">Top Priorities</h3>
            </div>
            <div className="space-y-2">
              {briefingData.briefing.priorities.map((priority, index) => (
                <div key={index} className="flex items-center gap-3 p-2 bg-gray-50 rounded-lg">
                  <span className="text-sm font-medium text-gray-500">#{index + 1}</span>
                  <span className="text-gray-700">{priority}</span>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Energy Recommendations */}
        {briefingData.briefing.energyRecommendations.length > 0 && (
          <div className="bg-white rounded-lg p-4 shadow-sm">
            <div className="flex items-center gap-2 mb-3">
              <Zap className="w-5 h-5 text-yellow-600" />
              <h3 className="font-semibold text-gray-900">Energy Recommendations</h3>
            </div>
            <div className="space-y-2">
              {briefingData.briefing.energyRecommendations.map((rec, index) => (
                <p key={index} className="text-gray-700 text-sm">{rec}</p>
              ))}
            </div>
          </div>
        )}

        {/* Timeline Alerts */}
        {briefingData.briefing.timelineAlerts.length > 0 && (
          <div className="bg-white rounded-lg p-4 shadow-sm border-l-4 border-orange-500">
            <div className="flex items-center gap-2 mb-3">
              <Globe className="w-5 h-5 text-orange-600" />
              <h3 className="font-semibold text-gray-900">Timeline Alerts</h3>
            </div>
            <div className="space-y-2">
              {briefingData.briefing.timelineAlerts.map((alert, index) => (
                <p key={index} className="text-gray-700 text-sm">{alert}</p>
              ))}
            </div>
          </div>
        )}

        {/* Warnings */}
        {briefingData.briefing.warnings.length > 0 && (
          <div className="bg-white rounded-lg p-4 shadow-sm border-l-4 border-red-500">
            <div className="flex items-center gap-2 mb-3">
              <AlertTriangle className="w-5 h-5 text-red-600" />
              <h3 className="font-semibold text-gray-900">Attention Needed</h3>
            </div>
            <div className="space-y-2">
              {briefingData.briefing.warnings.map((warning, index) => (
                <p key={index} className="text-red-700 text-sm">{warning}</p>
              ))}
            </div>
          </div>
        )}

        {/* Key Insights */}
        {briefingData.briefing.insights.length > 0 && (
          <div className="bg-white rounded-lg p-4 shadow-sm">
            <h3 className="font-semibold text-gray-900 mb-4 flex items-center gap-2">
              <TrendingUp className="w-5 h-5 text-green-600" />
              Key Insights
            </h3>
            <div className="space-y-3">
              {briefingData.briefing.insights.slice(0, 4).map((insight, index) => (
                <div
                  key={index}
                  className={`border rounded-lg p-3 ${getImpactColor(insight.urgency)}`}
                >
                  <div className="flex items-start gap-3">
                    <div className="flex-shrink-0 mt-0.5">
                      {getInsightIcon(insight.type)}
                    </div>
                    <div className="flex-1">
                      <h4 className="font-medium text-sm mb-1">{insight.title}</h4>
                      <p className="text-sm opacity-90">{insight.description}</p>
                      <div className="flex items-center gap-3 mt-2">
                        <span className="text-xs font-medium capitalize">
                          {insight.urgency} urgency
                        </span>
                        <span className="text-xs opacity-75">
                          {Math.round(insight.confidence * 100)}% confidence
                        </span>
                        <span className="text-xs opacity-75 capitalize">
                          {insight.domain}
                        </span>
                      </div>
                      {insight.suggestedActions.length > 0 && (
                        <div className="mt-2">
                          <p className="text-xs font-medium text-gray-600 mb-1">Quick action:</p>
                          <p className="text-xs text-gray-600">{insight.suggestedActions[0]}</p>
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Quick Stats */}
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
          <div className="bg-white rounded-lg p-4 text-center shadow-sm">
            <div className="text-2xl font-bold text-blue-600">{briefingData.briefing.insights.length}</div>
            <div className="text-sm text-gray-600">Insights</div>
          </div>
          <div className="bg-white rounded-lg p-4 text-center shadow-sm">
            <div className="text-2xl font-bold text-green-600">{briefingData.briefing.priorities.length}</div>
            <div className="text-sm text-gray-600">Priorities</div>
          </div>
          <div className="bg-white rounded-lg p-4 text-center shadow-sm">
            <div className="text-2xl font-bold text-yellow-600">{briefingData.briefing.energyRecommendations.length}</div>
            <div className="text-sm text-gray-600">Energy Tips</div>
          </div>
          <div className="bg-white rounded-lg p-4 text-center shadow-sm">
            <div className="text-2xl font-bold text-orange-600">{briefingData.briefing.timelineAlerts.length}</div>
            <div className="text-sm text-gray-600">Timeline Alerts</div>
          </div>
        </div>
      </div>
    </div>
  );
}