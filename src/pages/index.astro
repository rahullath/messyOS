---
// src/pages/index.astro (Enhanced with real data)
import DashboardLayout from '../layouts/DashboardLayout.astro';
import { createServerClient } from '../lib/supabase/server';

const supabase = createServerClient();
const userId = '368deac7-8526-45eb-927a-6a373c95d8c6'; // We'll fix auth later

// Fetch all dashboard data
const [{ data: habits }, { data: recentMetrics }, { data: todayEntries }] = await Promise.all([
  supabase.from('habits').select('*').eq('user_id', userId).eq('is_active', true),
  supabase.from('metrics').select('*').eq('user_id', userId).gte('recorded_at', new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString()).order('recorded_at', { ascending: false }),
  supabase.from('habit_entries').select('*').eq('user_id', userId).eq('date', new Date().toISOString().split('T')[0])
]);

// Ensure data is not null/undefined before processing
const safeHabits = habits || [];
const safeRecentMetrics = recentMetrics || [];
const safeTodayEntries = todayEntries || [];

// Calculate dashboard stats
const dashboardStats = {
  habitsToday: safeHabits.length,
  habitsCompleted: safeTodayEntries.length,
  completionRate: safeHabits.length ? Math.round((safeTodayEntries.length / safeHabits.length) * 100) : 0,
  
  // Health metrics
  avgSleep: calculateAverage(recentMetrics?.filter(m => m.type === 'sleep_duration'), 'value') / 60, // hours
  avgStress: calculateAverage(recentMetrics?.filter(m => m.type === 'stress_level'), 'value'),
  avgHeartRate: calculateAverage(recentMetrics?.filter(m => m.type === 'heart_rate_avg'), 'value'),
  
  // Finance
  weeklySpending: recentMetrics?.filter(m => m.type === 'expense').reduce((sum, m) => sum + m.value, 0) || 0,
  cryptoValue: recentMetrics?.filter(m => m.type === 'crypto_value').reduce((sum, m) => sum + m.value, 0) || 0
};

function calculateAverage(metrics: any[], field: string): number {
  if (!metrics || metrics.length === 0) return 0;
  return metrics.reduce((sum, m) => sum + (m[field] || 0), 0) / metrics.length;
}

// Recent activity feed
const recentActivity = [
  ...todayEntries?.map(entry => ({
    type: 'habit',
    message: `Completed habit: ${habits?.find(h => h.id === entry.habit_id)?.name}`,
    time: entry.logged_at,
    icon: '‚úÖ'
  })) || [],
  ...recentMetrics?.slice(0, 5).map(metric => ({
    type: 'metric',
    message: `Logged ${metric.type.replace('_', ' ')}: ${metric.value} ${metric.unit}`,
    time: metric.recorded_at,
    icon: getMetricIcon(metric.type)
  })) || []
].sort((a, b) => new Date(b.time).getTime() - new Date(a.time).getTime()).slice(0, 8);

function getMetricIcon(type: string): string {
  switch (type) {
    case 'sleep_duration': return 'üò¥';
    case 'heart_rate_avg': return '‚ù§Ô∏è';
    case 'stress_level': return 'üò∞';
    case 'expense': return 'üí∞';
    case 'crypto_value': return '‚Çø';
    default: return 'üìä';
  }
}
---

<DashboardLayout title="MeshOS - Dashboard">
  <div class="space-y-8">
    <!-- Welcome with AI insights button -->
    <div class="flex items-center justify-between">
      <div>
        <h1 class="text-3xl font-semibold text-text-primary mb-2">
          Good {new Date().getHours() < 12 ? 'morning' : new Date().getHours() < 18 ? 'afternoon' : 'evening'}, Rahul
        </h1>
        <p class="text-text-secondary">
          Here's your life overview for {new Date().toLocaleDateString('en-US', { weekday: 'long', month: 'long', day: 'numeric' })}
        </p>
      </div>
      <button 
        id="ai-insights-btn"
        class="flex items-center px-4 py-2 bg-gradient-to-r from-accent-primary to-accent-purple text-white rounded-lg hover:opacity-90 transition-opacity"
      >
        <span class="text-lg mr-2">ü§ñ</span>
        AI Insights
      </button>
    </div>

    <!-- Enhanced Stats Grid -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
      <!-- Habits Progress -->
      <div class="card-hover">
        <div class="flex items-center justify-between">
          <div>
            <p class="text-sm font-medium text-text-muted">Habits Today</p>
            <p class="text-2xl font-semibold text-text-primary mt-1">
              {dashboardStats.habitsCompleted}/{dashboardStats.habitsToday}
            </p>
            <p class="text-sm text-accent-success mt-1">{dashboardStats.completionRate}% complete</p>
          </div>
          <div class="w-12 h-12 bg-accent-success/10 rounded-lg flex items-center justify-center">
            <svg class="w-6 h-6 text-accent-success" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
          </div>
        </div>
      </div>

      <!-- Sleep Health -->
      <div class="card-hover">
        <div class="flex items-center justify-between">
          <div>
            <p class="text-sm font-medium text-text-muted">Avg Sleep</p>
            <p class="text-2xl font-semibold text-text-primary mt-1">
              {dashboardStats.avgSleep > 0 ? dashboardStats.avgSleep.toFixed(1) + 'h' : '--'}
            </p>
            <p class={`text-sm mt-1 ${
              dashboardStats.avgSleep >= 7 ? 'text-accent-success' : 
              dashboardStats.avgSleep >= 6 ? 'text-accent-warning' : 'text-accent-error'
            }`}>
              {dashboardStats.avgSleep >= 7 ? 'Excellent' : dashboardStats.avgSleep >= 6 ? 'Fair' : dashboardStats.avgSleep > 0 ? 'Poor' : 'No data'}
            </p>
          </div>
          <div class="w-12 h-12 bg-accent-primary/10 rounded-lg flex items-center justify-center">
            <span class="text-2xl">üò¥</span>
          </div>
        </div>
      </div>

      <!-- Stress Level -->
      <div class="card-hover">
        <div class="flex items-center justify-between">
          <div>
            <p class="text-sm font-medium text-text-muted">Avg Stress</p>
            <p class="text-2xl font-semibold text-text-primary mt-1">
              {dashboardStats.avgStress > 0 ? Math.round(dashboardStats.avgStress) : '--'}
            </p>
            <p class={`text-sm mt-1 ${
              dashboardStats.avgStress <= 30 ? 'text-accent-success' : 
              dashboardStats.avgStress <= 50 ? 'text-accent-warning' : 'text-accent-error'
            }`}>
              {dashboardStats.avgStress <= 30 ? 'Low' : dashboardStats.avgStress <= 50 ? 'Normal' : dashboardStats.avgStress > 0 ? 'High' : 'No data'}
            </p>
          </div>
          <div class="w-12 h-12 bg-accent-warning/10 rounded-lg flex items-center justify-center">
            <span class="text-2xl">üò∞</span>
          </div>
        </div>
      </div>

      <!-- Weekly Spending -->
      <div class="card-hover">
        <div class="flex items-center justify-between">
          <div>
            <p class="text-sm font-medium text-text-muted">Weekly Spending</p>
            <p class="text-2xl font-semibold text-text-primary mt-1">
              ‚Çπ{dashboardStats.weeklySpending.toLocaleString()}
            </p>
            <p class="text-sm text-text-muted mt-1">Last 7 days</p>
          </div>
          <div class="w-12 h-12 bg-accent-error/10 rounded-lg flex items-center justify-center">
            <span class="text-2xl">üí∞</span>
          </div>
        </div>
      </div>
    </div>

    <!-- Main Content Grid -->
    <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
      <!-- Recent Activity -->
      <div class="lg:col-span-2">
        <div class="card">
          <h2 class="text-xl font-semibold text-text-primary mb-6">Recent Activity</h2>
          
          {recentActivity.length > 0 ? (
            <div class="space-y-3">
              {recentActivity.map((activity, index) => (
                <div key={index} class="flex items-center space-x-3 p-3 bg-surface-hover rounded-lg">
                  <span class="text-lg">{activity.icon}</span>
                  <div class="flex-1">
                    <p class="text-sm text-text-primary">{activity.message}</p>
                    <p class="text-xs text-text-muted">
                      {new Date(activity.time).toLocaleTimeString()}
                    </p>
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <div class="text-center py-8">
              <p class="text-text-muted">No recent activity. Start logging some habits!</p>
            </div>
          )}
        </div>
      </div>

      <!-- Quick Actions & AI Insights -->
      <div class="space-y-6">
        <!-- Quick Actions -->
        <div class="card">
          <h2 class="text-xl font-semibold text-text-primary mb-6">Quick Actions</h2>
          
          <div class="space-y-3">
            <a href="/habits" class="w-full flex items-center justify-start px-4 py-3 bg-accent-success/10 hover:bg-accent-success/20 border border-accent-success/20 text-accent-success rounded-lg transition-colors">
              <svg class="w-5 h-5 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
              Log Habit
            </a>

            <button class="w-full flex items-center justify-start px-4 py-3 bg-accent-primary/10 hover:bg-accent-primary/20 border border-accent-primary/20 text-accent-primary rounded-lg transition-colors">
              <svg class="w-5 h-5 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
              </svg>
              Add Health Metric
            </button>

            <button class="w-full flex items-center justify-start px-4 py-3 bg-accent-warning/10 hover:bg-accent-warning/20 border border-accent-warning/20 text-accent-warning rounded-lg transition-colors">
              <svg class="w-5 h-5 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"></path>
              </svg>
              Log Expense
            </button>
          </div>
        </div>

        <!-- System Status -->
        <div class="card">
          <h3 class="text-lg font-medium text-text-primary mb-4">System Status</h3>
          
          <div class="space-y-3">
            <div class="flex items-center justify-between">
              <div class="flex items-center space-x-2">
                <div class="w-2 h-2 bg-accent-success rounded-full"></div>
                <span class="text-sm text-text-secondary">Database</span>
              </div>
              <span class="text-sm text-accent-success">Online</span>
            </div>

            <div class="flex items-center justify-between">
              <div class="flex items-center space-x-2">
                <div class="w-2 h-2 bg-accent-success rounded-full"></div>
                <span class="text-sm text-text-secondary">AI Analysis</span>
              </div>
              <span class="text-sm text-accent-success">Active</span>
            </div>

            <div class="flex items-center justify-between">
              <div class="flex items-center space-x-2">
                <div class="w-2 h-2 bg-accent-success rounded-full"></div>
                <span class="text-sm text-text-secondary">Data Sync</span>
              </div>
              <span class="text-sm text-accent-success">Updated</span>
            </div>
          </div>
        </div>

        <!-- Mini Health Summary -->
        {dashboardStats.avgSleep > 0 && (
          <div class="card">
            <h3 class="text-lg font-medium text-text-primary mb-4">Health Summary</h3>
            <div class="space-y-3">
              <div class="flex items-center justify-between">
                <span class="text-sm text-text-secondary">Sleep Quality</span>
                <div class="flex items-center space-x-2">
                  <div class={`w-2 h-2 rounded-full ${
                    dashboardStats.avgSleep >= 7 ? 'bg-accent-success' : 
                    dashboardStats.avgSleep >= 6 ? 'bg-accent-warning' : 'bg-accent-error'
                  }`}></div>
                  <span class="text-sm text-text-primary">{dashboardStats.avgSleep.toFixed(1)}h avg</span>
                </div>
              </div>
              
              {dashboardStats.avgHeartRate > 0 && (
                <div class="flex items-center justify-between">
                  <span class="text-sm text-text-secondary">Heart Rate</span>
                  <span class="text-sm text-text-primary">{Math.round(dashboardStats.avgHeartRate)} bpm avg</span>
                </div>
              )}
              
              <div class="flex items-center justify-between">
                <span class="text-sm text-text-secondary">Stress Level</span>
                <div class="flex items-center space-x-2">
                  <div class={`w-2 h-2 rounded-full ${
                    dashboardStats.avgStress <= 30 ? 'bg-accent-success' : 
                    dashboardStats.avgStress <= 50 ? 'bg-accent-warning' : 'bg-accent-error'
                  }`}></div>
                  <span class="text-sm text-text-primary">{Math.round(dashboardStats.avgStress)} avg</span>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>

    <!-- AI Insights Modal -->
    <div id="ai-modal" class="fixed inset-0 bg-black/50 hidden items-center justify-center z-50 p-4">
      <div class="bg-surface rounded-lg w-full max-w-4xl max-h-[90vh] overflow-y-auto">
        <div class="p-6">
          <div class="flex items-center justify-between mb-6">
            <h3 class="text-2xl font-semibold text-text-primary">ü§ñ AI Life Analysis</h3>
            <button id="close-ai-modal" class="text-text-muted hover:text-text-primary">
              <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
              </svg>
            </button>
          </div>
          <div id="ai-insights-content">
            <div class="animate-pulse space-y-4">
              <div class="h-6 bg-surface-hover rounded"></div>
              <div class="h-4 bg-surface-hover rounded w-3/4"></div>
              <div class="h-4 bg-surface-hover rounded w-1/2"></div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</DashboardLayout>

<script>
  // AI Insights Modal
  document.getElementById('ai-insights-btn')?.addEventListener('click', async () => {
    const modal = document.getElementById('ai-modal');
    const content = document.getElementById('ai-insights-content');
    
    modal?.classList.remove('hidden');
    modal?.classList.add('flex');
    
    try {
      // Load AI insights
      const response = await fetch('/api/ai/dashboard-insights');
      const insights = await response.json();
      
      // Render insights (you'll build this component)
      content.innerHTML = renderAIInsights(insights);
    } catch (error) {
      content.innerHTML = '<p class="text-accent-error">Failed to load AI insights. Please try again.</p>';
    }
  });

  document.getElementById('close-ai-modal')?.addEventListener('click', () => {
    const modal = document.getElementById('ai-modal');
    modal?.classList.add('hidden');
    modal?.classList.remove('flex');
  });

  function renderAIInsights(insights: any): string {
    // This would render your AI insights component
    return `
      <div class="space-y-6">
        <div class="card p-4">
          <h4 class="font-semibold text-text-primary mb-2">Life Balance Score</h4>
          <div class="text-2xl font-bold text-accent-primary">${insights.lifeBalance?.score || 'N/A'}/10</div>
          <p class="text-text-secondary text-sm">${insights.lifeBalance?.reasoning || 'Analysis in progress...'}</p>
        </div>
        <!-- More insights rendering here -->
      </div>
    `;
  }
</script>
