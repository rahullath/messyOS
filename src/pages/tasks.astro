---
// src/pages/tasks.astro - Comprehensive Task Management
import DashboardLayout from '../layouts/DashboardLayout.astro';
import { createServerClient } from '../lib/supabase/server';

const supabase = createServerClient(Astro.cookies);

// Get the user from session
const { data: { user } } = await supabase.auth.getUser();

if (!user) {
  return Astro.redirect('/login');
}

// Fetch tasks with comprehensive data
const { data: tasks, error: tasksError } = await supabase
  .from('tasks')
  .select(`
    *,
    task_sessions(
      id, started_at, ended_at, duration, session_type, productivity_score, energy_level
    )
  `)
  .eq('user_id', user.id)
  .order('created_at', { ascending: false });

// Fetch active task session if any
const { data: activeSession } = await supabase
  .from('task_sessions')
  .select('*, tasks(title)')
  .eq('user_id', user.id)
  .is('ended_at', null)
  .single();

// Process tasks for display
const processedTasks = (tasks || []).map(task => {
  const sessions = task.task_sessions || [];
  const totalDuration = sessions.reduce((sum: number, s: any) => sum + (s.duration || 0), 0);
  const avgProductivity = sessions.length > 0
    ? sessions.reduce((sum: number, s: any) => sum + (s.productivity_score || 0), 0) / sessions.length
    : 0;
  
  return {
    ...task,
    totalTimeSpent: totalDuration,
    avgProductivity: Math.round(avgProductivity * 10) / 10,
    isOverdue: task.due_date && new Date(task.due_date) < new Date() && task.status !== 'completed',
    isDueToday: task.due_date && new Date(task.due_date).toLocaleDateString() === new Date().toLocaleDateString(),
    sessionCount: sessions.length
  };
});

// Group tasks by status
const tasksByStatus = {
  todo: processedTasks.filter(t => t.status === 'todo'),
  in_progress: processedTasks.filter(t => t.status === 'in_progress'),
  completed: processedTasks.filter(t => t.status === 'completed').slice(0, 5), // Show only 5 recent completed tasks
  on_hold: processedTasks.filter(t => t.status === 'on_hold')
};

// Helper functions
const calculateAvgTaskTime = (tasks: any[], status: string) => {
  const relevantTasks = tasks.filter(t => t.status === status);
  if (relevantTasks.length === 0) return 0;
  const totalTime = relevantTasks.reduce((sum, t) => sum + (t.totalTimeSpent || 0), 0);
  return Math.round(totalTime / relevantTasks.length / 60); // Convert to minutes
};

const getPriorityColor = (priority: string) => {
  switch (priority) {
    case 'high': return 'red';
    case 'medium': return 'yellow';
    case 'low': return 'green';
    default: return 'gray';
  }
};

// Categories and priority dropdown options
const categories = [
  'Work', 'Personal', 'Learning', 'Health', 'Finance', 'Creative', 'Social', 'Maintenance', 'Planning', 'Other'
];

const priorityLevels = [
  { value: 'low', label: 'Low', color: 'green' },
  { value: 'medium', label: 'Medium', color: 'yellow' },
  { value: 'high', label: 'High', color: 'red' }
];
---

<DashboardLayout title="Tasks - MeshOS">
  <div class="space-y-6">
    <!-- Header Section -->
    <div class="flex items-center justify-between">
      <div>
        <h1 class="text-3xl font-bold text-gray-900">Task Management</h1>
        <p class="text-gray-600 mt-1">Organize and track your tasks efficiently</p>
      </div>
      <div class="flex items-center space-x-3">
        <button id="new-task-btn" class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg flex items-center gap-2 transition-colors">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
          </svg>
          Add Task
        </button>
        <a href="/ai-agent" class="bg-purple-500 hover:bg-purple-600 text-white px-4 py-2 rounded-lg flex items-center gap-2 transition-colors">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
          </svg>
          AI Insights
        </a>
      </div>
    </div>

    <!-- Task Stats -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
      {Object.entries(tasksByStatus).map(([status, statusTasks]) => (
        <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
          <div class="flex items-center justify-between">
            <div>
              <h3 class="text-sm font-medium text-gray-600 uppercase tracking-wide">
                {status.charAt(0).toUpperCase() + status.slice(1).replace('_', ' ')}
              </h3>
              <p class="text-2xl font-bold text-gray-900 mt-2">
                {statusTasks.length}
              </p>
            </div>
            <div class={`w-12 h-12 rounded-full flex items-center justify-center ${
              status === 'todo' ? 'bg-blue-100' :
              status === 'in_progress' ? 'bg-yellow-100' :
              status === 'completed' ? 'bg-green-100' :
              'bg-gray-100'
            }`}>
              {status === 'todo' && (
                <svg class="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
                </svg>
              )}
              {status === 'in_progress' && (
                <svg class="w-6 h-6 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
              )}
              {status === 'completed' && (
                <svg class="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
              )}
              {status === 'on_hold' && (
                <svg class="w-6 h-6 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 9v6m4-6v6m7-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
              )}
            </div>
          </div>
          <div class="mt-4 text-sm text-gray-500">
            Avg time: {calculateAvgTaskTime(processedTasks, status)} mins
          </div>
        </div>
      ))}
    </div>

    <!-- Task Boards -->
    <div class="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-4 gap-6">
      {Object.entries(tasksByStatus).map(([status, statusTasks]) => (
        <div class="bg-white rounded-lg shadow-sm border border-gray-200">
          <div class="p-4 border-b border-gray-200">
            <h3 class="text-lg font-semibold text-gray-900">
              {status.charAt(0).toUpperCase() + status.slice(1).replace('_', ' ')}
            </h3>
            <p class="text-sm text-gray-500">{statusTasks.length} tasks</p>
          </div>
          <div class="p-4 space-y-3 max-h-96 overflow-y-auto">
            {statusTasks.length === 0 ? (
              <div class="text-center py-8 text-gray-500">
                <svg class="w-12 h-12 mx-auto mb-4 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
                </svg>
                <p class="text-sm">No tasks yet</p>
              </div>
            ) : (
              statusTasks.map(task => (
                <div class="border border-gray-200 rounded-lg p-3 hover:shadow-md transition-shadow">
                  <div class="flex items-start justify-between">
                    <div class="flex-1">
                      <h4 class="font-medium text-gray-900 text-sm">{task.title}</h4>
                      {task.description && (
                        <p class="text-xs text-gray-600 mt-1 line-clamp-2">{task.description}</p>
                      )}
                      <div class="flex items-center gap-2 mt-2">
                        <span class={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
                          task.priority === 'high' ? 'bg-red-100 text-red-800' :
                          task.priority === 'medium' ? 'bg-yellow-100 text-yellow-800' :
                          'bg-green-100 text-green-800'
                        }`}>
                          {task.priority}
                        </span>
                        {task.due_date && (
                          <span class={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
                            task.isOverdue ? 'bg-red-100 text-red-800' :
                            task.isDueToday ? 'bg-orange-100 text-orange-800' :
                            'bg-gray-100 text-gray-800'
                          }`}>
                            {task.isOverdue ? 'Overdue' : 
                             task.isDueToday ? 'Due today' :
                             new Date(task.due_date).toLocaleDateString()}
                          </span>
                        )}
                      </div>
                    </div>
                    <div class="flex items-center gap-1 ml-2">
                      {status !== 'completed' && (
                        <button 
                          class="p-1 text-green-600 hover:bg-green-50 rounded transition-colors start-btn" 
                          data-task-id={task.id}
                          title="Start task"
                        >
                          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.828 14.828a4 4 0 01-5.656 0M9 10h1m4 0h1m-6 4h1m4 0h1m6-10V7a3 3 0 11-6 0V4h6zM4 20h16"></path>
                          </svg>
                        </button>
                      )}
                      <button 
                        class="p-1 text-blue-600 hover:bg-blue-50 rounded transition-colors edit-btn" 
                        data-task-id={task.id}
                        title="Edit task"
                      >
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                        </svg>
                      </button>
                      {status !== 'completed' && (
                        <button 
                          class="p-1 text-green-600 hover:bg-green-50 rounded transition-colors complete-btn" 
                          data-task-id={task.id}
                          title="Mark complete"
                        >
                          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                          </svg>
                        </button>
                      )}
                    </div>
                  </div>
                </div>
              ))
            )}
          </div>
        </div>
      ))}
    </div>

    <!-- Active Task Timer -->
    {activeSession && (
      <div id="active-timer" class="fixed bottom-4 right-4 bg-white rounded-lg shadow-lg border border-gray-200 p-4 min-w-64">
        <div class="flex items-center justify-between mb-2">
          <h4 class="font-medium text-gray-900">Active Task</h4>
          <button id="stop-timer-btn" class="text-red-600 hover:bg-red-50 p-1 rounded">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 10h6v4H9z"></path>
            </svg>
          </button>
        </div>
        <p class="text-sm text-gray-600 mb-2">{activeSession.tasks.title}</p>
        <div class="text-2xl font-bold text-blue-600" id="timer-display">00:00</div>
      </div>
    )}
  </div>

  <!-- New Task Modal -->
  <div id="new-task-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50">
    <div class="bg-white rounded-lg shadow-xl max-w-md w-full mx-4">
      <div class="p-6">
        <div class="flex items-center justify-between mb-4">
          <h3 class="text-lg font-semibold text-gray-900">Add New Task</h3>
          <button id="close-new-task-modal" class="text-gray-400 hover:text-gray-600">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>
        
        <form id="new-task-form" class="space-y-4">
          <div>
            <label for="title" class="block text-sm font-medium text-gray-700 mb-1">Title *</label>
            <input 
              id="title" 
              name="title"
              type="text" 
              class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900 bg-white" 
              required
              placeholder="Enter task title"
            />
          </div>
          
          <div>
            <label for="description" class="block text-sm font-medium text-gray-700 mb-1">Description</label>
            <textarea 
              id="description" 
              name="description"
              rows="3"
              class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900 bg-white"
              placeholder="Enter task description"
            ></textarea>
          </div>
          
          <div class="grid grid-cols-2 gap-4">
            <div>
              <label for="category" class="block text-sm font-medium text-gray-700 mb-1">Category *</label>
              <select 
                id="category" 
                name="category"
                class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900 bg-white"
                required
              >
                <option value="">Select category</option>
                {categories.map(cat => (
                  <option value={cat}>{cat}</option>
                ))}
              </select>
            </div>
            
            <div>
              <label for="priority" class="block text-sm font-medium text-gray-700 mb-1">Priority</label>
              <select 
                id="priority" 
                name="priority"
                class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900 bg-white"
              >
                {priorityLevels.map(level => (
                  <option value={level.value} selected={level.value === 'medium'}>{level.label}</option>
                ))}
              </select>
            </div>
          </div>
          
          <div>
            <label for="due_date" class="block text-sm font-medium text-gray-700 mb-1">Due Date</label>
            <input 
              id="due_date" 
              name="due_date"
              type="date" 
              class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900 bg-white"
            />
          </div>
          
          <div class="flex justify-end space-x-3 pt-4">
            <button 
              type="button" 
              id="cancel-new-task" 
              class="px-4 py-2 text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-lg transition-colors"
            >
              Cancel
            </button>
            <button 
              type="submit" 
              class="px-4 py-2 bg-blue-500 hover:bg-blue-600 text-white rounded-lg transition-colors"
            >
              Add Task
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
</DashboardLayout>

<script>
// Utility functions
function formatTime(seconds) {
  const minutes = Math.floor(seconds / 60);
  const secondsLeft = seconds % 60;
  return `${minutes.toString().padStart(2, '0')}:${secondsLeft.toString().padStart(2, '0')}`;
}

// Timer functionality
let timerInterval = null;
let startTime = null;

function startTimer() {
  startTime = Date.now();
  timerInterval = setInterval(updateTimer, 1000);
}

function stopTimer() {
  if (timerInterval) {
    clearInterval(timerInterval);
    timerInterval = null;
    startTime = null;
  }
}

function updateTimer() {
  if (startTime) {
    const elapsed = Math.floor((Date.now() - startTime) / 1000);
    const timerDisplay = document.getElementById('timer-display');
    if (timerDisplay) {
      timerDisplay.textContent = formatTime(elapsed);
    }
  }
}

// Event listeners
document.addEventListener('DOMContentLoaded', () => {
  const newTaskBtn = document.getElementById('new-task-btn');
  const newTaskModal = document.getElementById('new-task-modal');
  const closeModalBtn = document.getElementById('close-new-task-modal');
  const cancelBtn = document.getElementById('cancel-new-task');
  const newTaskForm = document.getElementById('new-task-form');

  // Modal controls
  if (newTaskBtn && newTaskModal) {
    newTaskBtn.addEventListener('click', () => {
      newTaskModal.classList.remove('hidden');
      newTaskModal.classList.add('flex');
    });
  }

  function closeModal() {
    if (newTaskModal) {
      newTaskModal.classList.add('hidden');
      newTaskModal.classList.remove('flex');
      newTaskForm?.reset();
    }
  }

  closeModalBtn?.addEventListener('click', closeModal);
  cancelBtn?.addEventListener('click', closeModal);

  // Close modal when clicking outside
  newTaskModal?.addEventListener('click', (e) => {
    if (e.target === newTaskModal) {
      closeModal();
    }
  });

  // Task action buttons
  document.querySelectorAll('.start-btn').forEach(button => {
    button.addEventListener('click', async () => {
      const taskId = button.getAttribute('data-task-id');
      console.log('Starting timer for task:', taskId);
      await startTaskSession(taskId);
    });
  });

  document.querySelectorAll('.complete-btn').forEach(button => {
    button.addEventListener('click', async () => {
      const taskId = button.getAttribute('data-task-id');
      console.log('Completing task:', taskId);
      await completeTask(taskId);
    });
  });

  document.querySelectorAll('.edit-btn').forEach(button => {
    button.addEventListener('click', () => {
      const taskId = button.getAttribute('data-task-id');
      console.log('Editing task:', taskId);
      // TODO: Implement edit functionality
    });
  });

  // Stop timer button
  document.getElementById('stop-timer-btn')?.addEventListener('click', async () => {
    await stopTaskSession();
  });

  // Form submission
  newTaskForm?.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const submitBtn = e.target.querySelector('button[type="submit"]');
    const originalText = submitBtn.textContent;
    submitBtn.textContent = 'Adding...';
    submitBtn.disabled = true;

    try {
      const formData = new FormData(newTaskForm);
      const taskData = Object.fromEntries(formData);

      const response = await fetch('/api/tasks', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(taskData)
      });

      const result = await response.json();

      if (response.ok && result.success) {
        closeModal();
        // Show success message
        showNotification('Task created successfully!', 'success');
        // Refresh the page to show new task
        setTimeout(() => location.reload(), 1000);
      } else {
        throw new Error(result.error || 'Failed to create task');
      }
    } catch (error) {
      console.error('Error creating task:', error);
      showNotification(error.message || 'Failed to create task', 'error');
    } finally {
      submitBtn.textContent = originalText;
      submitBtn.disabled = false;
    }
  });

  // Initialize timer if there's an active session
  const activeTimer = document.getElementById('active-timer');
  if (activeTimer) {
    startTimer();
  }
});

// API functions
async function startTaskSession(taskId) {
  try {
    const response = await fetch(`/api/tasks/${taskId}/start`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' }
    });

    const result = await response.json();

    if (response.ok && result.success) {
      showNotification('Task session started!', 'success');
      setTimeout(() => location.reload(), 1000);
    } else {
      throw new Error(result.error || 'Failed to start task session');
    }
  } catch (error) {
    console.error('Error starting task session:', error);
    showNotification(error.message || 'Failed to start task session', 'error');
  }
}

async function stopTaskSession() {
  try {
    const response = await fetch('/api/tasks/stop-session', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' }
    });

    const result = await response.json();

    if (response.ok && result.success) {
      showNotification('Task session stopped!', 'success');
      stopTimer();
      setTimeout(() => location.reload(), 1000);
    } else {
      throw new Error(result.error || 'Failed to stop task session');
    }
  } catch (error) {
    console.error('Error stopping task session:', error);
    showNotification(error.message || 'Failed to stop task session', 'error');
  }
}

async function completeTask(taskId) {
  try {
    const response = await fetch(`/api/tasks/${taskId}`, {
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ status: 'completed' })
    });

    const result = await response.json();

    if (response.ok && result.success) {
      showNotification('Task completed!', 'success');
      setTimeout(() => location.reload(), 1000);
    } else {
      throw new Error(result.error || 'Failed to complete task');
    }
  } catch (error) {
    console.error('Error completing task:', error);
    showNotification(error.message || 'Failed to complete task', 'error');
  }
}

// Notification system
function showNotification(message, type = 'info') {
  // Remove existing notifications
  const existingNotifications = document.querySelectorAll('.notification');
  existingNotifications.forEach(n => n.remove());

  const notification = document.createElement('div');
  notification.className = `notification fixed top-4 right-4 px-6 py-3 rounded-lg shadow-lg z-50 ${
    type === 'success' ? 'bg-green-500 text-white' :
    type === 'error' ? 'bg-red-500 text-white' :
    'bg-blue-500 text-white'
  }`;
  notification.textContent = message;

  document.body.appendChild(notification);

  // Auto remove after 3 seconds
  setTimeout(() => {
    notification.remove();
  }, 3000);
}
</script>
