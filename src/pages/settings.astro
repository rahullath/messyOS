---
// src/pages/settings.astro - User Settings and Preferences Page
import Layout from '../layouts/Layout.astro';
import { createServerAuth } from '../lib/auth/simple-multi-user';

// Require authentication
const serverAuth = createServerAuth(Astro.cookies);
const user = await serverAuth.getUser();

if (!user) {
  return Astro.redirect('/login');
}

// Get user preferences
const preferences = await serverAuth.getUserPreferences(user.id);

if (!preferences) {
  // Create default preferences if they don't exist
  console.log('⚠️ No preferences found, creating defaults...');
  await serverAuth.createDefaultPreferences(user.id, user.email);
  return Astro.redirect('/settings');
}

// Calculate trial status
const trialEndDate = preferences.trial_end_date ? new Date(preferences.trial_end_date) : null;
const now = new Date();
const daysLeft = trialEndDate ? Math.max(0, Math.ceil((trialEndDate.getTime() - now.getTime()) / (1000 * 60 * 60 * 24))) : 0;
---

<Layout title="Settings - meshOS">
  <div class="min-h-screen bg-gradient-to-br from-slate-900 via-blue-900 to-slate-900">
    <div class="container mx-auto px-6 py-8 max-w-4xl">
      
      <!-- Header -->
      <div class="mb-8">
        <h1 class="text-3xl font-bold text-white mb-2">Settings</h1>
        <p class="text-gray-300">Customize your meshOS experience</p>
      </div>

      <!-- User Info -->
      <div class="bg-black/20 backdrop-blur-sm border border-white/10 rounded-xl p-6 mb-6">
        <h2 class="text-xl font-semibold text-white mb-4">Account Information</h2>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label class="block text-sm font-medium text-gray-300 mb-1">Email</label>
            <p class="text-white bg-gray-800 px-3 py-2 rounded">{user.email}</p>
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-300 mb-1">User ID</label>
            <p class="text-gray-400 text-sm font-mono bg-gray-800 px-3 py-2 rounded truncate">{user.id}</p>
          </div>
        </div>
      </div>

      <!-- Subscription Status -->
      <div class="bg-black/20 backdrop-blur-sm border border-white/10 rounded-xl p-6 mb-6">
        <h2 class="text-xl font-semibold text-white mb-4">Subscription</h2>
        <div class="flex items-center justify-between">
          <div>
            <p class="text-white mb-1">
              Status: <span class="capitalize font-semibold text-cyan-400">{preferences.subscription_status}</span>
            </p>
            {preferences.subscription_status === 'trial' && (
              <p class="text-gray-300 text-sm">
                Trial ends: {trialEndDate?.toLocaleDateString()} ({daysLeft} days left)
              </p>
            )}
          </div>
          {preferences.subscription_status === 'trial' && (
            <button 
              id="extend-trial"
              class="bg-cyan-600 hover:bg-cyan-700 text-white px-4 py-2 rounded transition-colors"
            >
              Extend Trial (+7 days)
            </button>
          )}
        </div>
      </div>

      <!-- Theme Settings -->
      <div class="bg-black/20 backdrop-blur-sm border border-white/10 rounded-xl p-6 mb-6">
        <h2 class="text-xl font-semibold text-white mb-4">Theme & Appearance</h2>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <label class="block text-sm font-medium text-gray-300 mb-2">Theme</label>
            <select 
              id="theme-select" 
              class="w-full bg-gray-800 text-white border border-gray-600 rounded px-3 py-2"
              data-current={preferences.theme}
            >
              <option value="dark">Dark</option>
              <option value="light">Light</option>
              <option value="midnight">Midnight</option>
              <option value="forest">Forest</option>
              <option value="sunset">Sunset</option>
              <option value="ocean">Ocean</option>
            </select>
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-300 mb-2">Accent Color</label>
            <input 
              type="color" 
              id="accent-color" 
              value={preferences.accent_color}
              class="w-full h-10 bg-gray-800 border border-gray-600 rounded"
            />
          </div>
        </div>
      </div>

      <!-- Enabled Modules -->
      <div class="bg-black/20 backdrop-blur-sm border border-white/10 rounded-xl p-6 mb-6">
        <h2 class="text-xl font-semibold text-white mb-4">Active Modules</h2>
        <div class="grid grid-cols-2 md:grid-cols-4 gap-4" id="modules-grid">
          {['habits', 'tasks', 'health', 'finance', 'content', 'social', 'travel', 'home'].map((module) => (
            <label class="cursor-pointer flex items-center space-x-2">
              <input 
                type="checkbox" 
                value={module}
                checked={preferences.enabled_modules?.includes(module)}
                class="rounded"
              />
              <span class="text-white capitalize">{module}</span>
            </label>
          ))}
        </div>
      </div>

      <!-- AI Settings -->
      <div class="bg-black/20 backdrop-blur-sm border border-white/10 rounded-xl p-6 mb-6">
        <h2 class="text-xl font-semibold text-white mb-4">AI Assistant</h2>
        <div class="space-y-4">
          <div>
            <label class="block text-sm font-medium text-gray-300 mb-2">Personality</label>
            <select 
              id="ai-personality" 
              class="w-full bg-gray-800 text-white border border-gray-600 rounded px-3 py-2"
              data-current={preferences.ai_personality}
            >
              <option value="professional">Professional Coach</option>
              <option value="friendly">Friendly Mentor</option>
              <option value="analytical">Data Scientist</option>
              <option value="motivational">Life Coach</option>
            </select>
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-300 mb-2">
              Proactivity Level: <span id="proactivity-value">{preferences.ai_proactivity_level}</span>
            </label>
            <input 
              type="range" 
              id="ai-proactivity" 
              min="1" 
              max="5" 
              value={preferences.ai_proactivity_level}
              class="w-full accent-cyan-500"
            />
            <div class="flex justify-between text-sm text-gray-400 mt-1">
              <span>Passive</span>
              <span>Very Proactive</span>
            </div>
          </div>
        </div>
      </div>

      <!-- Actions -->
      <div class="flex flex-col sm:flex-row gap-4">
        <button 
          id="save-settings"
          class="bg-cyan-600 hover:bg-cyan-700 text-white px-6 py-3 rounded-lg font-semibold transition-colors flex-1"
        >
          Save Settings
        </button>
        <button 
          id="reset-settings"
          class="bg-gray-600 hover:bg-gray-700 text-white px-6 py-3 rounded-lg font-semibold transition-colors"
        >
          Reset to Defaults
        </button>
      </div>

      <!-- Status Message -->
      <div id="message" class="hidden mt-4 p-4 rounded-lg text-center"></div>
    </div>
  </div>

  <script>
    import { preferencesClient } from '../lib/auth/preferences-client';
    
    // Initialize current values
    document.addEventListener('DOMContentLoaded', () => {
      // Set current theme
      const themeSelect = document.getElementById('theme-select') as HTMLSelectElement;
      if (themeSelect) {
        themeSelect.value = themeSelect.dataset.current || 'dark';
      }
      
      // Set current AI personality
      const aiPersonalitySelect = document.getElementById('ai-personality') as HTMLSelectElement;
      if (aiPersonalitySelect) {
        aiPersonalitySelect.value = aiPersonalitySelect.dataset.current || 'professional';
      }
    });

    // Update proactivity level display
    const proactivitySlider = document.getElementById('ai-proactivity') as HTMLInputElement;
    const proactivityValue = document.getElementById('proactivity-value');
    
    if (proactivitySlider && proactivityValue) {
      proactivitySlider.addEventListener('input', () => {
        proactivityValue.textContent = proactivitySlider.value;
      });
    }

    // Show message function
    function showMessage(text: string, type: 'success' | 'error' | 'info' = 'info') {
      const messageEl = document.getElementById('message');
      if (messageEl) {
        messageEl.textContent = text;
        messageEl.className = `mt-4 p-4 rounded-lg text-center ${
          type === 'error' ? 'bg-red-900/50 text-red-200 border border-red-800' : 
          type === 'success' ? 'bg-green-900/50 text-green-200 border border-green-800' :
          'bg-blue-900/50 text-blue-200 border border-blue-800'
        }`;
        messageEl.classList.remove('hidden');
        
        setTimeout(() => {
          messageEl.classList.add('hidden');
        }, 3000);
      }
    }

    // Save settings
    document.getElementById('save-settings')?.addEventListener('click', async () => {
      try {
        showMessage('Saving settings...', 'info');
        
        // Collect all form data
        const theme = (document.getElementById('theme-select') as HTMLSelectElement).value;
        const accentColor = (document.getElementById('accent-color') as HTMLInputElement).value;
        const aiPersonality = (document.getElementById('ai-personality') as HTMLSelectElement).value;
        const aiProactivity = parseInt((document.getElementById('ai-proactivity') as HTMLInputElement).value);
        
        // Get enabled modules
        const moduleCheckboxes = document.querySelectorAll('#modules-grid input[type="checkbox"]');
        const enabledModules: string[] = [];
        moduleCheckboxes.forEach((checkbox) => {
          if ((checkbox as HTMLInputElement).checked) {
            enabledModules.push((checkbox as HTMLInputElement).value);
          }
        });
        
        // Update preferences
        const success = await preferencesClient.updatePreferences({
          theme,
          accent_color: accentColor,
          enabled_modules: enabledModules,
          module_order: enabledModules,
          ai_personality: aiPersonality,
          ai_proactivity_level: aiProactivity
        });
        
        if (success) {
          showMessage('Settings saved successfully!', 'success');
        } else {
          showMessage('Failed to save settings. Please try again.', 'error');
        }
      } catch (error) {
        console.error('Save settings error:', error);
        showMessage('An error occurred while saving settings.', 'error');
      }
    });

    // Reset settings
    document.getElementById('reset-settings')?.addEventListener('click', async () => {
      if (confirm('Are you sure you want to reset all settings to defaults?')) {
        try {
          showMessage('Resetting settings...', 'info');
          
          const success = await preferencesClient.resetToDefaults();
          
          if (success) {
            showMessage('Settings reset to defaults!', 'success');
            setTimeout(() => {
              window.location.reload();
            }, 1500);
          } else {
            showMessage('Failed to reset settings. Please try again.', 'error');
          }
        } catch (error) {
          console.error('Reset settings error:', error);
          showMessage('An error occurred while resetting settings.', 'error');
        }
      }
    });

    // Extend trial
    document.getElementById('extend-trial')?.addEventListener('click', async () => {
      try {
        showMessage('Extending trial...', 'info');
        
        const success = await preferencesClient.extendTrial();
        
        if (success) {
          showMessage('Trial extended by 7 days!', 'success');
          setTimeout(() => {
            window.location.reload();
          }, 1500);
        } else {
          showMessage('Failed to extend trial. Please try again.', 'error');
        }
      } catch (error) {
        console.error('Extend trial error:', error);
        showMessage('An error occurred while extending trial.', 'error');
      }
    });
  </script>
</Layout>