---
// src/pages/reset-password.astro - Password Reset Page
import Layout from '../layouts/Layout.astro';

// Check if we have the proper reset tokens
const url = new URL(Astro.request.url);
const token = url.searchParams.get('token');
const type = url.searchParams.get('type');

if (!token || type !== 'recovery') {
  // No valid reset token, redirect to login with message
  return Astro.redirect('/login?message=invalid-reset-link');
}
---

<Layout title="Reset Password - MeshOS">
  <div class="min-h-screen bg-gradient-to-br from-slate-900 via-blue-900 to-slate-900 flex items-center justify-center p-6">
    <div class="max-w-md w-full space-y-8">
      
      <!-- Header -->
      <div class="text-center">
        <h1 class="text-4xl font-bold text-white mb-2">
          <span class="text-cyan-400">messy</span>OS
        </h1>
        <h2 class="text-2xl font-semibold text-white mb-2">Reset Your Password</h2>
        <p class="text-gray-300">Enter your new password below</p>
      </div>

      <!-- Reset Password Form -->
      <div class="bg-black/20 backdrop-blur-sm border border-white/10 rounded-xl p-8">
        <form id="reset-form" class="space-y-4">
          <div>
            <label class="block text-sm font-medium text-gray-300 mb-2">New Password</label>
            <input 
              type="password" 
              name="password" 
              required
              minlength="6"
              class="w-full px-4 py-3 rounded-lg bg-gray-800 border border-gray-600 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-cyan-500"
              placeholder="Enter your new password"
            />
          </div>
          
          <div>
            <label class="block text-sm font-medium text-gray-300 mb-2">Confirm New Password</label>
            <input 
              type="password" 
              name="confirmPassword" 
              required
              class="w-full px-4 py-3 rounded-lg bg-gray-800 border border-gray-600 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-cyan-500"
              placeholder="Confirm your new password"
            />
          </div>

          <button 
            type="submit"
            class="w-full bg-cyan-600 hover:bg-cyan-700 text-white font-semibold py-3 px-4 rounded-lg transition-colors"
          >
            Update Password
          </button>
        </form>

        <!-- Links -->
        <div class="mt-6 text-center">
          <a href="/login" class="text-sm text-gray-400 hover:text-white">
            ← Back to sign in
          </a>
        </div>
      </div>

      <!-- Status Messages -->
      <div id="message" class="hidden p-4 rounded-lg text-center"></div>
    </div>
  </div>

  <script>
    import { supabase } from '../lib/supabase/client';

    const resetForm = document.getElementById('reset-form');
    const messageEl = document.getElementById('message');

    function showMessage(text, type = 'error') {
      messageEl.textContent = text;
      messageEl.className = `p-4 rounded-lg text-center ${
        type === 'error' ? 'bg-red-900/50 text-red-200 border border-red-800' : 
        type === 'info' ? 'bg-blue-900/50 text-blue-200 border border-blue-800' :
        'bg-green-900/50 text-green-200 border border-green-800'
      }`;
      messageEl.classList.remove('hidden');
    }

    resetForm?.addEventListener('submit', async (e) => {
      e.preventDefault();
      const formData = new FormData(e.target);
      const password = formData.get('password');
      const confirmPassword = formData.get('confirmPassword');

      if (password !== confirmPassword) {
        showMessage('Passwords do not match.');
        return;
      }

      if (password.length < 6) {
        showMessage('Password must be at least 6 characters long.');
        return;
      }

      try {
        showMessage('Updating password...', 'info');
        
        // Update password using Supabase
        const { error } = await supabase.auth.updateUser({
          password: password
        });

        if (error) {
          throw error;
        }

        showMessage('Password updated successfully! Redirecting to dashboard...', 'success');
        
        // Redirect to dashboard after successful password update
        setTimeout(() => {
          window.location.href = '/dashboard';
        }, 2000);

      } catch (error) {
        console.error('Password reset error:', error);
        showMessage(error.message || 'Failed to update password. Please try again.');
      }
    });

    // Initialize session recovery on page load
    window.addEventListener('load', async () => {
      try {
        // Get session from URL hash parameters (Supabase magic link handling)
        const { data, error } = await supabase.auth.getSession();
        
        if (error) {
          console.error('Session recovery error:', error);
          showMessage('Invalid or expired reset link. Please request a new one.');
          setTimeout(() => {
            window.location.href = '/login';
          }, 3000);
        } else if (data.session) {
          console.log('✅ Password reset session established');
          showMessage('Ready to update your password.', 'info');
        }
      } catch (error) {
        console.error('Session initialization error:', error);
        showMessage('Something went wrong. Please try requesting a new reset link.');
      }
    });
  </script>
</Layout>