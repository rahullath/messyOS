---
// Minimal Privy debug page
---

<!doctype html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Privy Debug - meshOS</title>
  <style>
    body { 
      font-family: system-ui; 
      background: #111; 
      color: #fff; 
      padding: 2rem; 
    }
    .container { max-width: 800px; margin: 0 auto; }
    .status { 
      background: #222; 
      padding: 1rem; 
      margin: 1rem 0; 
      border-radius: 8px; 
      border-left: 4px solid #06b6d4;
    }
    .error { border-left-color: #ef4444; background: #3c1618; }
    .success { border-left-color: #10b981; background: #15292a; }
    .loading { border-left-color: #f59e0b; background: #362819; }
    pre { background: #1a1a1a; padding: 1rem; border-radius: 4px; overflow: auto; }
    button { 
      background: #06b6d4; 
      color: white; 
      border: none; 
      padding: 0.75rem 1.5rem; 
      border-radius: 6px; 
      cursor: pointer; 
      font-size: 1rem;
    }
    button:hover { background: #0891b2; }
    button:disabled { background: #374151; cursor: not-allowed; }
  </style>
</head>
<body>
  <div class="container">
    <h1>üîç Privy Debug Center</h1>
    
    <div class="status">
      <h2>Environment Check</h2>
      <p><strong>APP ID:</strong> {import.meta.env.PUBLIC_PRIVY_APP_ID || '‚ùå MISSING'}</p>
      <p><strong>Mode:</strong> {import.meta.env.MODE}</p>
      <p><strong>Dev:</strong> {import.meta.env.DEV ? 'Yes' : 'No'}</p>
    </div>

    <div class="status" id="privy-status">
      <h2>Privy Status</h2>
      <p>Loading...</p>
    </div>

    <div id="privy-container">
      <div class="status loading">
        <h2>Privy Component</h2>
        <p>Initializing React component...</p>
      </div>
    </div>

    <div class="status">
      <h2>Console Output</h2>
      <div id="console-output" style="max-height: 200px; overflow-y: auto; background: #1a1a1a; padding: 1rem; border-radius: 4px;">
        <div>Console logs will appear here...</div>
      </div>
    </div>

    <div class="status">
      <h2>Quick Actions</h2>
      <button onclick="location.reload()">üîÑ Reload Page</button>
      <button onclick="clearConsole()">üßπ Clear Console</button>
      <button onclick="testPrivy()">üß™ Test Privy</button>
    </div>
  </div>

  <script type="module">
    console.log('üöÄ Script starting...');
    
    try {
      console.log('üì¶ Importing React...');
      const React = await import('react');
      console.log('‚úÖ React imported:', !!React.default);
      
      console.log('üì¶ Importing ReactDOM...');
      const { createRoot } = await import('react-dom/client');
      console.log('‚úÖ ReactDOM imported:', !!createRoot);
      
      console.log('üì¶ Importing Privy...');
      const { PrivyProvider, usePrivy } = await import('@privy-io/react-auth');
      console.log('‚úÖ Privy imported:', !!PrivyProvider, !!usePrivy);

    // Capture console logs
    const originalLog = console.log;
    const originalError = console.error;
    const originalWarn = console.warn;
    
    const consoleOutput = document.getElementById('console-output');
    
    function addToConsole(type, message) {
      const div = document.createElement('div');
      div.style.color = type === 'error' ? '#ef4444' : type === 'warn' ? '#f59e0b' : '#10b981';
      div.style.fontSize = '0.75rem';
      div.style.fontFamily = 'monospace';
      div.textContent = `[${new Date().toLocaleTimeString()}] ${type.toUpperCase()}: ${message}`;
      consoleOutput.appendChild(div);
      consoleOutput.scrollTop = consoleOutput.scrollHeight;
    }
    
    console.log = (...args) => {
      originalLog(...args);
      addToConsole('log', args.join(' '));
    };
    
    console.error = (...args) => {
      originalError(...args);
      addToConsole('error', args.join(' '));
    };
    
    console.warn = (...args) => {
      originalWarn(...args);
      addToConsole('warn', args.join(' '));
    };

    // Global functions
    window.clearConsole = () => {
      consoleOutput.innerHTML = '<div>Console cleared...</div>';
    };
    
    window.testPrivy = () => {
      console.log('üß™ Manual Privy test initiated');
      const status = document.getElementById('privy-status');
      status.innerHTML = '<h2>Testing Privy...</h2><p>Check console for results</p>';
    };

      // Simple Privy test component
      function PrivyDebugComponent() {
        const { ready, authenticated, user, login } = usePrivy();
        const [logs, setLogs] = React.default.useState([]);
        
        React.default.useEffect(() => {
        const newLog = {
          timestamp: new Date().toISOString(),
          ready,
          authenticated,
          userId: user?.id,
          userEmail: user?.linkedAccounts?.find(acc => acc.type === 'email')?.address
        };
        
        setLogs(prev => [...prev.slice(-5), newLog]); // Keep last 5 logs
        console.log('üîç Privy State:', newLog);
        
        // Update status in DOM
        const statusDiv = document.getElementById('privy-status');
        if (statusDiv) {
          statusDiv.className = ready ? (authenticated ? 'status success' : 'status') : 'status loading';
          statusDiv.innerHTML = `
            <h2>Privy Status</h2>
            <p><strong>Ready:</strong> ${ready ? '‚úÖ Yes' : '‚ùå No'}</p>
            <p><strong>Authenticated:</strong> ${authenticated ? '‚úÖ Yes' : '‚è≥ No'}</p>
            ${user ? `<p><strong>User:</strong> ${newLog.userEmail || newLog.userId}</p>` : ''}
          `;
        }
      }, [ready, authenticated, user]);
      
      // Error timeout
      React.default.useEffect(() => {
        if (!ready) {
          const timeout = setTimeout(() => {
            console.error('üö® PRIVY INITIALIZATION TIMEOUT - This indicates a serious issue');
            const statusDiv = document.getElementById('privy-status');
            if (statusDiv) {
              statusDiv.className = 'status error';
              statusDiv.innerHTML = `
                <h2>‚ùå Privy Error</h2>
                <p>Failed to initialize after 10 seconds</p>
                <p style="font-size: 0.875rem; margin-top: 0.5rem;">
                  Possible causes:<br>
                  ‚Ä¢ Network connectivity issues<br>
                  ‚Ä¢ Invalid App ID<br>
                  ‚Ä¢ Privy service outage<br>
                  ‚Ä¢ Browser blocking scripts
                </p>
              `;
            }
          }, 10000);
          return () => clearTimeout(timeout);
        }
      }, [ready]);

      return React.default.createElement('div', { style: { padding: '1rem' } }, [
        React.default.createElement('div', { 
          key: 'status',
          style: { 
            background: ready ? (authenticated ? '#15292a' : '#1e3a8a') : '#362819',
            border: '1px solid ' + (ready ? (authenticated ? '#10b981' : '#3b82f6') : '#f59e0b'),
            padding: '1rem',
            borderRadius: '6px',
            marginBottom: '1rem'
          }
        }, [
          React.default.createElement('h3', { key: 'title' }, ready ? (authenticated ? '‚úÖ Ready & Authenticated' : 'üîµ Ready - Not Authenticated') : '‚è≥ Initializing...'),
          !ready && React.default.createElement('div', {
            key: 'spinner',
            style: {
              width: '20px',
              height: '20px',
              border: '2px solid #f59e0b',
              borderTop: '2px solid transparent',
              borderRadius: '50%',
              animation: 'spin 1s linear infinite',
              margin: '0.5rem 0'
            }
          }),
          ready && !authenticated && React.default.createElement('button', {
            key: 'login-btn',
            onClick: () => {
              console.log('üöÄ Login button clicked');
              login();
            },
            style: {
              background: '#06b6d4',
              color: 'white',
              border: 'none',
              padding: '0.5rem 1rem',
              borderRadius: '4px',
              cursor: 'pointer',
              marginTop: '0.5rem'
            }
          }, 'Login with Email')
        ]),
        React.default.createElement('details', { key: 'logs' }, [
          React.default.createElement('summary', { key: 'summary' }, 'Recent State Changes'),
          React.default.createElement('pre', { 
            key: 'log-content',
            style: { fontSize: '0.75rem', marginTop: '0.5rem' }
          }, JSON.stringify(logs, null, 2))
        ])
      ]);
    }

      // App wrapper
      function DebugApp() {
        const appId = import.meta.env.PUBLIC_PRIVY_APP_ID;
        
        if (!appId) {
          return React.default.createElement('div', {
            style: { color: 'red', padding: '1rem', background: '#3c1618', borderRadius: '4px' }
          }, [
            React.default.createElement('h2', { key: 'title' }, '‚ùå Configuration Error'),
            React.default.createElement('p', { key: 'message' }, 'PUBLIC_PRIVY_APP_ID is missing from environment variables'),
            React.default.createElement('p', { key: 'help' }, 'Add it to your .env file: PUBLIC_PRIVY_APP_ID=your-app-id')
          ]);
        }

        console.log('üöÄ Initializing Privy with App ID:', appId);

        return React.default.createElement(PrivyProvider, {
          appId: appId,
          config: {
            loginMethods: ['email'],
            appearance: { theme: 'dark' },
            embeddedWallets: { createOnLogin: 'off' },
            externalWallets: {
              metamask: false,
              walletConnect: false,
              coinbaseWallet: false
            }
          }
        }, React.default.createElement(PrivyDebugComponent));
      }

    // Add CSS for spinner animation
    const style = document.createElement('style');
    style.textContent = `
      @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
      }
    `;
    document.head.appendChild(style);

      // Test basic React first
      console.log('üß™ Testing basic React component...');
      function TestComponent() {
        return React.default.createElement('div', {
          style: { color: 'lime', padding: '1rem', background: '#1a1a1a', borderRadius: '4px' }
        }, '‚úÖ React is working!');
      }

      // Mount the app
      const container = document.getElementById('privy-container');
      if (container) {
        console.log('üéØ Mounting React app...');
        const root = createRoot(container);
        root.render(React.default.createElement(TestComponent));
        
        // After 2 seconds, try mounting Privy
        setTimeout(() => {
          console.log('üîÑ Now testing Privy...');
          root.render(React.default.createElement(DebugApp));
        }, 2000);
      } else {
        console.error('‚ùå Container element not found');
      }
      
    } catch (error) {
      console.error('üí• Import failed:', error);
      const container = document.getElementById('privy-container');
      if (container) {
        container.innerHTML = `
          <div style="color: red; padding: 1rem; background: #3c1618; border-radius: 4px;">
            ‚ùå Module Import Failed<br>
            <pre style="font-size: 0.75rem; margin-top: 0.5rem;">${error.message}</pre>
          </div>
        `;
      }
    }
  </script>
</body>
</html>