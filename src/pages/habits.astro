---
// src/pages/habits.astro - COMPLETE VERSION
import DashboardLayout from '../layouts/DashboardLayout.astro';
import { createServerClient } from '../lib/supabase/server';

const supabase = createServerClient(Astro.cookies);

// Get the user from session
const { data: { user } } = await supabase.auth.getUser();

if (!user) {
  return Astro.redirect('/login');
}

// Fetch user's habits with today's entries
const { data: habits, error } = await supabase
  .from('habits')
  .select(`
    *,
    habit_entries(
      id,
      value,
      logged_at,
      notes,
      date
    )
  `)
  .eq('user_id', user.id)
  .eq('is_active', true)
  .order('position', { ascending: true });

if (error) {
  console.error('Error fetching habits:', error);
}

// Process habits to show today's status and fix streak calculation
const today = new Date().toISOString().split('T')[0];

const isHabitSuccess = (value: number, habitName: string, habitType: string): boolean => {
  // SIMPLIFIED: All habits now use database value 1 = success, 0 = failure
  // The import logic handles the CSV conversion correctly
  return value === 1;
};


const habitsWithStatus = (habits || []).map((habit) => {
  const todayEntry = habit.habit_entries?.find((entry: any) => 
    entry.date === today
  );
  
  // Get last 90 days for accurate streaks
  const last90Days = [];
  for (let i = 89; i >= 0; i--) {
    const date = new Date();
    date.setDate(date.getDate() - i);
    const dateStr = date.toISOString().split('T')[0];
    
    const dayEntry = habit.habit_entries?.find((entry: any) =>
      entry.date === dateStr
    );
    
    // FIXED: Use proper success logic
    let completed = false;
    if (dayEntry) {
      completed = isHabitSuccess(dayEntry.value, habit.name, habit.type);
    }
    
    last90Days.push({
      date: dateStr,
      completed,
      value: dayEntry?.value || 0,
      hasEntry: !!dayEntry
    });
  }
  
  // Calculate REAL current streak (from today backwards)
  let currentStreak = 0;
  for (let i = last90Days.length - 1; i >= 0; i--) {
    if (last90Days[i].completed) {
      currentStreak++;
    } else if (last90Days[i].hasEntry) {
      // Has entry but not successful - streak broken
      break;
    } else {
      // No entry - streak broken (unless we're just starting)
      if (currentStreak > 0) break;
    }
  }
  
  // Get last 7 days for display
  const last7Days = last90Days.slice(-7);
  
  // Check if completed today - FIXED for vaping
  const completedToday = todayEntry ? 
    isHabitSuccess(todayEntry.value, habit.name, habit.type) : false;
  
  return {
    ...habit,
    completedToday,
    todayEntry,
    todayValue: todayEntry?.value || 0,
    last7Days,
    realCurrentStreak: currentStreak,
    weekStreak: last7Days.filter(d => d.completed).length
  };
});


const completedToday = habitsWithStatus.filter(h => h.completedToday).length;
const totalHabits = habitsWithStatus.length;
const completionRate = totalHabits > 0 ? Math.round((completedToday / totalHabits) * 100) : 0;
const longestStreak = Math.max(...habitsWithStatus.map(h => h.realCurrentStreak), 0);
---

<DashboardLayout title="Habits - MeshOS">
  <div class="space-y-8">
    <!-- Header with Import -->
    <div class="flex items-center justify-between">
      <div>
        <h1 class="text-3xl font-semibold text-text-primary mb-2">Habits</h1>
        <p class="text-text-secondary">
          Build better routines, one day at a time
        </p>
      </div>
      <div class="flex space-x-3">
        <button 
          id="recalc-streaks-btn"
          class="flex items-center px-4 py-2 bg-accent-warning text-white rounded-lg hover:bg-accent-warning/90 transition-colors"
        >
          <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
          </svg>
          Fix Streaks
        </button>
        <button 
          id="import-btn"
          class="flex items-center px-4 py-2 bg-accent-success text-white rounded-lg hover:bg-accent-success/90 transition-colors"
        >
          <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path>
          </svg>
          Import Data
        </button>
        <button 
          id="add-habit-btn"
          class="flex items-center px-4 py-2 bg-accent-primary text-white rounded-lg hover:bg-accent-primary/90 transition-colors"
        >
          <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
          </svg>
          New Habit
        </button>
      </div>
    </div>

    <!-- Enhanced Stats -->
    <div class="grid grid-cols-1 md:grid-cols-4 gap-6">
      <div class="card">
        <div class="flex items-center justify-between">
          <div>
            <p class="text-sm font-medium text-text-muted">Today's Progress</p>
            <p class="text-2xl font-semibold text-text-primary mt-1">
              {completedToday}/{totalHabits}
            </p>
            <p class="text-sm text-accent-success mt-1">{completionRate}% complete</p>
          </div>
          <div class="w-12 h-12 bg-accent-success/10 rounded-lg flex items-center justify-center">
            <svg class="w-6 h-6 text-accent-success" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
          </div>
        </div>
      </div>

      <div class="card">
        <div class="flex items-center justify-between">
          <div>
            <p class="text-sm font-medium text-text-muted">Longest Streak</p>
            <p class="text-2xl font-semibold text-text-primary mt-1">{longestStreak}</p>
            <p class="text-sm text-text-muted mt-1">days current</p>
          </div>
          <div class="w-12 h-12 bg-accent-warning/10 rounded-lg flex items-center justify-center">
            <span class="text-2xl">🔥</span>
          </div>
        </div>
      </div>

      <div class="card">
        <div class="flex items-center justify-between">
          <div>
            <p class="text-sm font-medium text-text-muted">Total Habits</p>
            <p class="text-2xl font-semibold text-text-primary mt-1">{totalHabits}</p>
            <p class="text-sm text-text-muted mt-1">active</p>
          </div>
          <div class="w-12 h-12 bg-accent-primary/10 rounded-lg flex items-center justify-center">
            <svg class="w-6 h-6 text-accent-primary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
            </svg>
          </div>
        </div>
      </div>

      <div class="card">
        <div class="flex items-center justify-between">
          <div>
            <p class="text-sm font-medium text-text-muted">Best Streak</p>
            <p class="text-2xl font-semibold text-text-primary mt-1">{Math.max(...habitsWithStatus.map(h => h.best_streak || 0), 0)}</p>
            <p class="text-sm text-text-muted mt-1">days ever</p>
          </div>
          <div class="w-12 h-12 bg-accent-purple/10 rounded-lg flex items-center justify-center">
            <span class="text-2xl">🏆</span>
          </div>
        </div>
      </div>
    </div>

    <!-- Habits Grid with Beautiful UI -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      {habitsWithStatus.map((habit: any) => (
        <div class="card hover:bg-surface-hover transition-colors">
          <!-- Habit Header -->
          <div class="flex items-start justify-between mb-4">
            <div class="flex-1">
              <div class="flex items-center space-x-2 mb-2">
                <div 
                  class="w-3 h-3 rounded-full" 
                  style={`background-color: ${habit.color}`}
                ></div>
                <h3 class="font-semibold text-text-primary">{habit.name}</h3>
              </div>
              <p class="text-sm text-text-muted">{habit.category}</p>
              {habit.description && (
                <p class="text-xs text-text-muted mt-1">{habit.description}</p>
              )}
            </div>
            <div class="flex flex-col items-end space-y-1">
              <span class={`px-2 py-1 text-xs rounded-full ${
                habit.type === 'build' 
                  ? 'bg-accent-success/20 text-accent-success' 
                  : 'bg-accent-error/20 text-accent-error'
              }`}>
                {habit.type}
              </span>
              {habit.measurement_type === 'count' && (
                <span class="text-xs text-text-muted">
                  Today: {habit.todayValue}
                </span>
              )}
            </div>
          </div>

          <!-- Skip Policy -->
          <div class="flex items-center justify-between mb-2">
            <span class={`text-xs px-2 py-1 rounded-full ${
              habit.allows_skips
                ? 'bg-blue-500/20 text-blue-400'
                : 'bg-red-500/20 text-red-400'
            }`}>
              {habit.allows_skips ? '⏭️ Flexible' : '🚫 Strict'}
            </span>
            {habit.total_skips > 0 ? (
              <span class="text-xs text-gray-400">{habit.total_skips} skips</span>
            ) : ''}
          </div>

          <!-- Streak & Stats -->
          <div class="flex items-center justify-between mb-4">
            <div class="flex items-center space-x-2">
              <span class="text-xl">🔥</span>
              <span class="text-lg font-semibold text-text-primary">{habit.realCurrentStreak}</span>
              <span class="text-sm text-text-muted">day streak</span>
            </div>
            <div class="text-right">
              <p class="text-sm text-text-muted">Best: {habit.best_streak || 0}</p>
              <p class="text-xs text-text-muted">This week: {habit.weekStreak}/7</p>
            </div>
          </div>

          <!-- 7-Day Progress -->
          <div class="mb-4">
            <p class="text-xs text-text-muted mb-2">Last 7 days</p>
            <div class="flex space-x-1">
              {habit.last7Days.map((day: any, index: number) => (
                <div
                  class={`w-6 h-6 rounded-full flex items-center justify-center text-xs ${
                    day.completed
                      ? 'bg-accent-success text-white'
                      : day.hasEntry
                      ? 'bg-accent-warning text-white'
                      : 'bg-surface border border-border text-text-muted'
                  }`}
                  title={`${day.date}: ${day.hasEntry ? day.value : 'No entry'}`}
                >
                  {day.completed ? '✓' : day.hasEntry ? day.value : '·'}
                </div>
              ))}
            </div>
          </div>

          <!-- Action Button -->
          <button
            class={`w-full py-3 px-4 rounded-lg font-medium transition-colors ${
              habit.completedToday
                ? 'bg-accent-success/20 text-accent-success border border-accent-success/30 cursor-default'
                : 'bg-accent-primary/20 text-accent-primary border border-accent-primary/30 hover:bg-accent-primary/30'
            }`}
            onclick={habit.completedToday ? undefined : `logHabit('${habit.id}', '${habit.name}')`}
            disabled={habit.completedToday}
          >
            {habit.completedToday ? (
              <>
                <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                </svg>
                Completed Today
                {habit.measurement_type === 'count' && ` (${habit.todayValue})`}
              </>
            ) : (
              <>
                <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                </svg>
                {habit.measurement_type === 'boolean' ? 'Mark Complete' : 'Log Value'}
              </>
            )}
          </button>
        </div>
      ))}
    </div>

    <!-- Import Modal -->
    <div id="import-modal" class="fixed inset-0 bg-black/50 hidden items-center justify-center z-50">
      <div class="bg-surface rounded-lg p-6 w-full max-w-md mx-4">
        <div class="flex items-center justify-between mb-4">
          <h3 class="text-xl font-semibold text-text-primary">Import Data</h3>
          <button id="close-import" class="text-text-muted hover:text-text-primary">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>
        <p class="text-text-secondary mb-4">
          Want to import more data? Go to the import page.
        </p>
        <a href="/import" class="w-full flex items-center justify-center px-4 py-2 bg-accent-primary text-white rounded-lg hover:bg-accent-primary/90 transition-colors">
          Go to Import Page
        </a>
      </div>
    </div>
  </div>
</DashboardLayout>

<script>
  // Import modal
  document.getElementById('import-btn')?.addEventListener('click', () => {
    document.getElementById('import-modal')?.classList.remove('hidden');
    document.getElementById('import-modal')?.classList.add('flex');
  });

  document.getElementById('close-import')?.addEventListener('click', () => {
    document.getElementById('import-modal')?.classList.add('hidden');
    document.getElementById('import-modal')?.classList.remove('flex');
  });

  // Close modal on background click
  document.getElementById('import-modal')?.addEventListener('click', (e) => {
    if (e.target === e.currentTarget) {
      document.getElementById('import-modal')?.classList.add('hidden');
      document.getElementById('import-modal')?.classList.remove('flex');
    }
  });


// Update the logHabit function in habits.astro to support skip days:

// Add this to src/pages/habits.astro <script> section
// Replace the existing logHabit function

window.logHabit = async function(habitId: string, habitName: string) {
  // Show enhanced logging modal
  showEnhancedLoggingModal(habitId, habitName, false);
};

function showEnhancedLoggingModal(habitId: string, habitName: string, allowsSkips: boolean) {
  const modal = document.createElement('div');
  modal.className = 'fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4';
  modal.id = 'enhanced-logging-modal';
  
  const currentTime = new Date().toTimeString().slice(0, 5);
  
  modal.innerHTML = `
    <div class="bg-gray-900 rounded-xl w-full max-w-2xl max-h-[90vh] overflow-y-auto">
      <div class="p-6">
        <!-- Header -->
        <div class="flex items-center justify-between mb-6">
          <div>
            <h2 class="text-2xl font-bold text-white">Log ${habitName}</h2>
            <p class="text-gray-400 text-sm">Enhanced logging with context</p>
          </div>
          <button onclick="closeEnhancedModal()" class="text-gray-400 hover:text-white">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>

        <form id="enhanced-logging-form" class="space-y-6">
          <!-- Status -->
          <div>
            <label class="block text-sm font-medium text-gray-300 mb-3">How did it go?</label>
            <div class="space-y-2">
              <button type="button" onclick="setStatus(1)" class="status-btn w-full p-3 rounded-lg border border-gray-600 bg-gray-800 hover:bg-gray-700 text-left text-green-400">
                ✅ Completed Successfully
              </button>
              ${allowsSkips ? `
              <button type="button" onclick="setStatus(3)" class="status-btn w-full p-3 rounded-lg border border-gray-600 bg-gray-800 hover:bg-gray-700 text-left text-blue-400">
                ⏭️ Skipped (Rest Day)
              </button>
              ` : ''}
              <button type="button" onclick="setStatus(0)" class="status-btn w-full p-3 rounded-lg border border-gray-600 bg-gray-800 hover:bg-gray-700 text-left text-red-400">
                ❌ Failed
              </button>
            </div>
          </div>

          <!-- Timing -->
          <div class="grid grid-cols-2 gap-4">
            <div>
              <label class="block text-sm font-medium text-gray-300 mb-2">Completion Time</label>
              <input type="time" id="completion-time" value="${currentTime}" 
                     class="w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg text-white">
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-300 mb-2">Duration (minutes)</label>
              <input type="number" id="duration" placeholder="30" min="0" max="480"
                     class="w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg text-white">
            </div>
          </div>

          <!-- Effort & Energy -->
          <div class="grid grid-cols-2 gap-4">
            <div>
              <label class="block text-sm font-medium text-gray-300 mb-2">
                Effort Level: <span id="effort-value">3</span>/5
              </label>
              <input type="range" id="effort" min="1" max="5" value="3" 
                     class="w-full accent-blue-500" 
                     oninput="document.getElementById('effort-value').textContent = this.value">
              <div class="flex justify-between text-xs text-gray-400 mt-1">
                <span>Easy</span><span>Hard</span>
              </div>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-300 mb-2">
                Energy Level: <span id="energy-value">3</span>/5
              </label>
              <input type="range" id="energy" min="1" max="5" value="3" 
                     class="w-full accent-green-500"
                     oninput="document.getElementById('energy-value').textContent = this.value">
              <div class="flex justify-between text-xs text-gray-400 mt-1">
                <span>Low</span><span>High</span>
              </div>
            </div>
          </div>

          <!-- Mood -->
          <div>
            <label class="block text-sm font-medium text-gray-300 mb-2">
              Mood: <span id="mood-value">3</span>/5
            </label>
            <input type="range" id="mood" min="1" max="5" value="3" 
                   class="w-full accent-purple-500"
                   oninput="document.getElementById('mood-value').textContent = this.value">
            <div class="flex justify-between text-xs text-gray-400 mt-1">
              <span>😔 Low</span><span>😊 Great</span>
            </div>
          </div>

          <!-- Location & Weather -->
          <div class="grid grid-cols-2 gap-4">
            <div>
              <label class="block text-sm font-medium text-gray-300 mb-2">Location</label>
              <select id="location" class="w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg text-white">
                <option value="">Select location</option>
                <option value="Home">Home</option>
                <option value="Gym">Gym</option>
                <option value="Office">Office</option>
                <option value="University">University</option>
                <option value="Outdoors">Outdoors</option>
                <option value="Other">Other</option>
              </select>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-300 mb-2">Weather</label>
              <select id="weather" class="w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg text-white">
                <option value="">Select weather</option>
                <option value="Sunny">Sunny</option>
                <option value="Rainy">Rainy</option>
                <option value="Cloudy">Cloudy</option>
                <option value="Hot">Hot</option>
                <option value="Cold">Cold</option>
                <option value="Humid">Humid</option>
              </select>
            </div>
          </div>

          <!-- Context Tags -->
          <div>
            <label class="block text-sm font-medium text-gray-300 mb-2">Context (select all that apply)</label>
            <div class="grid grid-cols-3 gap-2" id="context-tags">
              ${['High Energy', 'Low Energy', 'Stressed', 'Relaxed', 'Motivated', 'Tired', 'Social', 'Alone', 'Weekend', 'Workday', 'Morning', 'Evening'].map(tag => `
                <button type="button" onclick="toggleContext('${tag}')" 
                        class="context-tag px-3 py-2 text-sm rounded-lg border border-gray-600 bg-gray-800 hover:bg-gray-700 text-gray-300"
                        data-tag="${tag}">
                  ${tag}
                </button>
              `).join('')}
            </div>
          </div>

          <!-- Notes -->
          <div>
            <label class="block text-sm font-medium text-gray-300 mb-2">Notes (optional)</label>
            <textarea id="notes" rows="3" placeholder="How did it feel? Any insights?" 
                      class="w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg text-white resize-none"></textarea>
          </div>

          <!-- Submit -->
          <div class="flex space-x-3">
            <button type="button" onclick="closeEnhancedModal()" 
                    class="flex-1 px-4 py-3 bg-gray-600 text-white rounded-lg hover:bg-gray-500">
              Cancel
            </button>
            <button type="submit" 
                    class="flex-1 px-4 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-500">
              Log ${habitName}
            </button>
          </div>
        </form>
      </div>
    </div>
  `;
  
  document.body.appendChild(modal);
  
  // Form submission
  const form = document.getElementById('enhanced-logging-form');
  if (form) {
    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      await submitEnhancedLog(habitId, habitName);
    });
  }
  
  // Initialize with success status
  setStatus(1);
}

let selectedStatus = 1;
let selectedContext: string[] = [];

function setStatus(status: number) {
  selectedStatus = status;
  // Update button styles
  document.querySelectorAll('.status-btn').forEach(btn => {
    btn.classList.remove('border-blue-500', 'bg-blue-500/20');
    btn.classList.add('border-gray-600', 'bg-gray-800');
  });
  const target = (event as any)?.target as HTMLElement;
  if (target) {
    target.classList.remove('border-gray-600', 'bg-gray-800');
    target.classList.add('border-blue-500', 'bg-blue-500/20');
  }
}

function toggleContext(tag: string) {
  const button = document.querySelector(`[data-tag="${tag}"]`) as HTMLElement;
  if (button) {
    if (selectedContext.includes(tag)) {
      selectedContext = selectedContext.filter(t => t !== tag);
      button.classList.remove('border-blue-500', 'bg-blue-500/20', 'text-blue-400');
      button.classList.add('border-gray-600', 'bg-gray-800', 'text-gray-300');
    } else {
      selectedContext.push(tag);
      button.classList.remove('border-gray-600', 'bg-gray-800', 'text-gray-300');
      button.classList.add('border-blue-500', 'bg-blue-500/20', 'text-blue-400');
    }
  }
}

async function submitEnhancedLog(habitId: string, habitName: string) {
  const effortEl = document.getElementById('effort') as HTMLInputElement;
  const durationEl = document.getElementById('duration') as HTMLInputElement;
  const completionTimeEl = document.getElementById('completion-time') as HTMLInputElement;
  const energyEl = document.getElementById('energy') as HTMLInputElement;
  const moodEl = document.getElementById('mood') as HTMLInputElement;
  const locationEl = document.getElementById('location') as HTMLSelectElement;
  const weatherEl = document.getElementById('weather') as HTMLSelectElement;
  const notesEl = document.getElementById('notes') as HTMLTextAreaElement;

  const formData = {
    value: selectedStatus,
    effort: effortEl ? parseInt(effortEl.value) : 3,
    duration: durationEl?.value ? parseInt(durationEl.value) : null,
    completion_time: completionTimeEl?.value || '',
    energy_level: energyEl ? parseInt(energyEl.value) : 3,
    mood: moodEl ? parseInt(moodEl.value) : 3,
    location: locationEl?.value || '',
    weather: weatherEl?.value || '',
    context: selectedContext,
    notes: notesEl?.value || ''
  };

  try {
    const response = await fetch(`/api/habits/${habitId}/log-enhanced`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(formData)
    });

    if (response.ok) {
      const result = await response.json();
      
      // Show success message
      const toast = document.createElement('div');
      toast.className = 'fixed top-4 right-4 bg-green-500 text-white px-6 py-3 rounded-lg shadow-lg z-50';
      toast.innerHTML = `
        <div class="flex items-center space-x-2">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
          </svg>
          <span>✅ ${habitName} logged with context!</span>
        </div>
      `;
      document.body.appendChild(toast);
      
      setTimeout(() => {
        toast.remove();
        window.location.reload();
      }, 2000);
      
      closeEnhancedModal();
    } else {
      const error = await response.json();
      const errorMessage = error instanceof Error ? error.message : (error.error || 'Failed to log habit');
      throw new Error(errorMessage);
    }
  } catch (error: unknown) {
    const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';
    alert(`Error: ${errorMessage}`);
  }
}

function closeEnhancedModal() {
  const modal = document.getElementById('enhanced-logging-modal');
  if (modal) {
    modal.remove();
  }
  selectedContext = [];
  selectedStatus = 1;
}
