---
// src/pages/habits.astro
import DashboardLayout from '../layouts/DashboardLayout.astro';
import { createServerClient } from '../lib/supabase/server';
import type { Database, Tables } from '../types/supabase';

const supabase = createServerClient(Astro.request);

// Get authenticated user
const { data: { user }, error: authError } = await supabase.auth.getUser();

if (authError || !user) {
  return Astro.redirect('/login');
}

// Fetch user's habits with today's entries
const { data: habits, error } = await supabase
  .from('habits')
  .select(`
    *,
    habit_entries(
      id,
      value,
      logged_at,
      notes
    )
  `)
  .eq('user_id', user.id)
  .eq('is_active', true)
  .order('created_at', { ascending: false });

if (error) {
  console.error('Error fetching habits:', error);
}

type HabitWithEntries = Tables<'habits'> & { habit_entries: Tables<'habit_entries'>[] | null };

type HabitWithStatus = HabitWithEntries & { 
  completedToday: boolean; 
  todayEntry: Tables<'habit_entries'> | undefined; 
  last7Days: { date: string; completed: boolean; value: number; }[];
};

// Process habits to show today's status
const today = new Date().toDateString();
const habitsWithStatus: HabitWithStatus[] = (habits || [])?.map((habit: HabitWithEntries) => {
  const todayEntry = habit.habit_entries?.find((entry: Tables<'habit_entries'>) => 
    new Date(entry.logged_at!).toDateString() === today
  );
  
  // Get last 7 days for weekly view
  const last7Days = [];
  for (let i = 6; i >= 0; i--) {
    const date = new Date();
    date.setDate(date.getDate() - i);
    const dateStr = date.toDateString();
    
    const dayEntry = habit.habit_entries?.find((entry: Tables<'habit_entries'>) =>
      new Date(entry.logged_at!).toDateString() === dateStr
    );
    
    last7Days.push({
      date: dateStr,
      completed: !!dayEntry,
      value: dayEntry?.value || 0
    });
  }
  
  return {
    ...habit,
    completedToday: !!todayEntry,
    todayEntry,
    last7Days
  };
}) || [];

const completedToday = habitsWithStatus.filter(h => h.completedToday).length;
const totalHabits = habitsWithStatus.length;
const completionRate = totalHabits > 0 ? Math.round((completedToday / totalHabits) * 100) : 0;

const longestStreak = Math.max(...habitsWithStatus.map(h => h.streak_count || 0), 0);
---

<DashboardLayout title="Habits - MeshOS">
  <div class="space-y-8">
    <!-- Header -->
    <div class="flex items-center justify-between">
      <div>
        <h1 class="text-3xl font-semibold text-text-primary mb-2">Habits</h1>
        <p class="text-text-secondary">
          Build better routines, one day at a time
        </p>
      </div>
      <button 
        id="add-habit-btn"
        class="flex items-center px-4 py-2 bg-accent-primary text-white rounded-lg hover:bg-accent-primary/90 transition-colors"
      >
        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
        </svg>
        New Habit
      </button>
    </div>

    <!-- Stats -->
    <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
      <div class="card">
        <div class="flex items-center justify-between">
          <div>
            <p class="text-sm font-medium text-text-muted">Today's Progress</p>
            <p class="text-2xl font-semibold text-text-primary mt-1">{completedToday}/{totalHabits}</p>
            <p class="text-sm text-accent-success mt-1">{completionRate}% complete</p>
          </div>
          <div class="w-12 h-12 bg-accent-success/10 rounded-lg flex items-center justify-center">
            <svg class="w-6 h-6 text-accent-success" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
          </div>
        </div>
      </div>

      <div class="card">
        <div class="flex items-center justify-between">
          <div>
            <p class="text-sm font-medium text-text-muted">Longest Streak</p>
            <p class="text-2xl font-semibold text-text-primary mt-1">{longestStreak}</p>
            <p class="text-sm text-text-muted mt-1">days</p>
          </div>
          <div class="w-12 h-12 bg-accent-warning/10 rounded-lg flex items-center justify-center">
            <span class="text-2xl">ðŸ”¥</span>
          </div>
        </div>
      </div>

      <div class="card">
        <div class="flex items-center justify-between">
          <div>
            <p class="text-sm font-medium text-text-muted">Total Habits</p>
            <p class="text-2xl font-semibold text-text-primary mt-1">{totalHabits}</p>
            <p class="text-sm text-text-muted mt-1">active</p>
          </div>
          <div class="w-12 h-12 bg-accent-primary/10 rounded-lg flex items-center justify-center">
            <svg class="w-6 h-6 text-accent-primary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
            </svg>
          </div>
        </div>
      </div>
    </div>

    <!-- Habits Grid -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      {(habitsWithStatus || []).map((habit: HabitWithStatus) => (
        <div key={habit.id} class="card hover:bg-surface-hover transition-colors">
          <!-- Habit Header -->
          <div class="flex items-start justify-between mb-4">
            <div class="flex-1">
              <h3 class="font-semibold text-text-primary mb-1">{habit.name}</h3>
              <p class="text-sm text-text-muted">{habit.category}</p>
              {habit.description && (
                <p class="text-xs text-text-muted mt-1">{habit.description}</p>
              )}
            </div>
            <div class="flex items-center space-x-2">
              <span class={`px-2 py-1 text-xs rounded-full ${
                habit.type === 'build' 
                  ? 'bg-accent-success/20 text-accent-success' 
                  : 'bg-accent-error/20 text-accent-error'
              }`}>
                {habit.type}
              </span>
            </div>
          </div>

          <!-- Streak Info -->
          <div class="flex items-center space-x-2 mb-4">
            <span class="text-2xl">ðŸ”¥</span>
            <span class="text-lg font-semibold text-text-primary">{habit.streak_count}</span>
            <span class="text-sm text-text-muted">day streak</span>
          </div>

          <!-- Weekly Progress -->
          <div class="mb-4">
            <p class="text-xs text-text-muted mb-2">Last 7 days</p>
            <div class="flex space-x-1">
              {habit.last7Days.map((day: { date: string; completed: boolean; value: number; }, index: number) => (
                <div
                  key={index}
                  class={`w-6 h-6 rounded-full flex items-center justify-center text-xs ${
                    day.completed
                      ? 'bg-accent-success text-white'
                      : 'bg-surface border border-border text-text-muted'
                  }`}
                  title={day.date}
                >
                  {day.completed ? 'âœ“' : 'Â·'}
                </div>
              ))}
            </div>
          </div>

          <!-- Action Button -->
          <button
            class={`w-full py-3 px-4 rounded-lg font-medium transition-colors ${
              habit.completedToday
                ? 'bg-accent-success/20 text-accent-success border border-accent-success/30 cursor-default'
                : 'bg-accent-primary/20 text-accent-primary border border-accent-primary/30 hover:bg-accent-primary/30'
            }`}
            onclick={habit.completedToday ? undefined : `logHabit('${habit.id}', '${habit.name}')`}
            disabled={habit.completedToday}
          >
            {habit.completedToday ? (
              <>
                <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                </svg>
                Completed Today
              </>
            ) : (
              <>
                <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                </svg>
                Mark Complete
              </>
            )}
          </button>
        </div>
      ))}

      {habitsWithStatus.length === 0 && (
        <div class="col-span-full card text-center py-12">
          <div class="w-16 h-16 bg-accent-primary/10 rounded-full flex items-center justify-center mx-auto mb-4">
            <svg class="w-8 h-8 text-accent-primary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
            </svg>
          </div>
          <h3 class="text-lg font-semibold text-text-primary mb-2">No habits yet</h3>
          <p class="text-text-muted mb-4">Start building better routines by creating your first habit</p>
          <button 
            onclick="document.getElementById('add-habit-btn').click()"
            class="px-4 py-2 bg-accent-primary text-white rounded-lg hover:bg-accent-primary/90 transition-colors"
          >
            Create Your First Habit
          </button>
        </div>
      )}
    </div>
  </div>
</DashboardLayout>

<script>
  // Log habit completion
  window.logHabit = async function(habitId: string, habitName: string) {
    try {
      const response = await fetch(`/api/habits/${habitId}/log`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ value: 1 })
      });

      if (response.ok) {
        // Show success message
        alert(`âœ… ${habitName} completed!`);
        // Reload page to show updated state
        window.location.reload();
      } else {
        const error = await response.json();
        alert(`Error: ${error.error}`);
      }
    } catch (error: any) {
      alert('Failed to log habit. Please try again.');
      console.error('Error logging habit:', error);
    }
  };

  // Add habit modal (placeholder for now)
  document.getElementById('add-habit-btn')?.addEventListener('click', () => {
    alert('Add habit modal coming in next phase! For now, add habits directly in your database.');
  });
</script>
