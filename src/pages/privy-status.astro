---
// src/pages/privy-status.astro - Check Privy Setup Status
---

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Privy Setup Status - MeshOS</title>
    <style>
        body {
            font-family: system-ui, sans-serif;
            margin: 0;
            padding: 2rem;
            background: linear-gradient(135deg, #0f172a 0%, #1e293b 50%, #334155 100%);
            color: white;
            min-height: 100vh;
        }
        .container {
            max-width: 800px;
            margin: 0 auto;
        }
        .status-card {
            background: rgba(0, 0, 0, 0.3);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 1rem;
            padding: 2rem;
            margin-bottom: 2rem;
        }
        .status-good { border-color: #22c55e; }
        .status-warning { border-color: #f59e0b; }
        .status-error { border-color: #ef4444; }
        .status-indicator {
            display: inline-block;
            width: 12px;
            height: 12px;
            border-radius: 50%;
            margin-right: 0.5rem;
        }
        .good { background: #22c55e; }
        .warning { background: #f59e0b; }
        .error { background: #ef4444; }
        code {
            background: rgba(0, 0, 0, 0.5);
            padding: 0.25rem 0.5rem;
            border-radius: 0.25rem;
            font-family: 'Courier New', monospace;
        }
        .env-example {
            background: rgba(0, 0, 0, 0.6);
            padding: 1rem;
            border-radius: 0.5rem;
            margin: 1rem 0;
            border-left: 4px solid #06b6d4;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üîê Privy Setup Status</h1>
        
        <div id="status-container">
            <p>Checking Privy configuration...</p>
        </div>

        <div class="status-card">
            <h2>üìã Setup Instructions</h2>
            
            <h3>1. Get Privy API Keys</h3>
            <p>Visit <a href="https://privy.io" target="_blank" style="color: #06b6d4;">privy.io</a> and create an account if you haven't already.</p>
            
            <h3>2. Create Environment Variables</h3>
            <p>Create a <code>.env</code> file in your project root:</p>
            <div class="env-example">
                <pre># Privy Configuration
PUBLIC_PRIVY_APP_ID=your_privy_app_id_here
PRIVY_APP_SECRET=your_privy_app_secret_here

# Your existing environment variables...</pre>
            </div>
            
            <h3>3. Run Database Migration</h3>
            <p>Execute the safe migration:</p>
            <div class="env-example">
                <pre>psql -d your_database < database/privy-migration-safe.sql</pre>
            </div>
            
            <h3>4. Restart Development Server</h3>
            <div class="env-example">
                <pre>npm run dev</pre>
            </div>
        </div>
        
        <div class="status-card">
            <h2>üß™ Test Links</h2>
            <p><a href="/auth-test" style="color: #06b6d4;">Auth Test Page</a> - Complete authentication flow</p>
            <p><a href="/privy-demo" style="color: #06b6d4;">Privy Demo</a> - Interactive demo</p>
        </div>
    </div>

    <script>
        async function checkPrivyStatus() {
            const container = document.getElementById('status-container');
            const results = [];
            
            // Check environment variables
            const appId = import.meta.env.PUBLIC_PRIVY_APP_ID;
            if (appId) {
                results.push({
                    status: 'good',
                    title: 'Environment Variables',
                    message: `PUBLIC_PRIVY_APP_ID is set: ${appId.substring(0, 10)}...`
                });
            } else {
                results.push({
                    status: 'error',
                    title: 'Environment Variables',
                    message: 'PUBLIC_PRIVY_APP_ID is missing from environment variables'
                });
            }
            
            // Check API endpoints
            try {
                const response = await fetch('/api/auth/privy-verify', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ token: 'test' })
                });
                const data = await response.json();
                
                if (data.error && data.error.includes('token')) {
                    results.push({
                        status: 'good',
                        title: 'API Endpoints',
                        message: 'Privy verification endpoint is working'
                    });
                } else {
                    results.push({
                        status: 'warning',
                        title: 'API Endpoints',
                        message: 'API endpoint accessible but may need token validation fixes'
                    });
                }
            } catch (error) {
                results.push({
                    status: 'error',
                    title: 'API Endpoints',
                    message: `API endpoint error: ${error.message}`
                });
            }
            
            // Check database
            try {
                const response = await fetch('/api/tokens/balance?privy_user_id=test');
                const data = await response.json();
                
                if (data.error && data.error.includes('User not found')) {
                    results.push({
                        status: 'good',
                        title: 'Database Tables',
                        message: 'Token balance API is working (database connected)'
                    });
                } else if (data.error) {
                    results.push({
                        status: 'warning',
                        title: 'Database Tables',
                        message: 'Database connected but may need migration'
                    });
                }
            } catch (error) {
                results.push({
                    status: 'error',
                    title: 'Database Tables',
                    message: `Database error: ${error.message}`
                });
            }
            
            // Render results
            container.innerHTML = results.map(result => `
                <div class="status-card status-${result.status}">
                    <h3>
                        <span class="status-indicator ${result.status}"></span>
                        ${result.title}
                    </h3>
                    <p>${result.message}</p>
                </div>
            `).join('');
            
            // Overall status
            const hasErrors = results.some(r => r.status === 'error');
            const hasWarnings = results.some(r => r.status === 'warning');
            
            let overallStatus, overallMessage;
            if (hasErrors) {
                overallStatus = 'error';
                overallMessage = 'Setup incomplete - please fix the errors above';
            } else if (hasWarnings) {
                overallStatus = 'warning';
                overallMessage = 'Setup mostly complete - check warnings above';
            } else {
                overallStatus = 'good';
                overallMessage = 'Setup complete! You can now test Privy authentication';
            }
            
            container.insertAdjacentHTML('afterbegin', `
                <div class="status-card status-${overallStatus}">
                    <h2>
                        <span class="status-indicator ${overallStatus}"></span>
                        Overall Status
                    </h2>
                    <p>${overallMessage}</p>
                </div>
            `);
        }
        
        checkPrivyStatus();
    </script>
</body>
</html>