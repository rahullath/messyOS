---
// This page handles the PKCE exchange on the client side
---

<!DOCTYPE html>
<html>
<head>
  <title>Completing Login...</title>
  <style>
    body { 
      font-family: system-ui; 
      display: flex; 
      align-items: center; 
      justify-content: center; 
      height: 100vh; 
      margin: 0; 
      background: linear-gradient(135deg, #1e293b, #334155);
      color: white;
    }
    .spinner { 
      width: 40px; 
      height: 40px; 
      border: 4px solid #64748b; 
      border-top: 4px solid #06b6d4; 
      border-radius: 50%; 
      animation: spin 1s linear infinite; 
      margin-bottom: 20px;
    }
    @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }
  </style>
</head>
<body>
  <div style="text-align: center;">
    <div class="spinner"></div>
    <p>Completing your login...</p>
    <p id="status" style="color: #64748b; font-size: 14px;">Initializing...</p>
  </div>

  <script>
    import { supabase } from '../../lib/supabase/client';
    
    async function handleAuthExchange() {
      const status = document.getElementById('status');
      
      try {
        status.textContent = 'Processing authentication...';
        
        const urlParams = new URLSearchParams(window.location.search);
        const code = urlParams.get('code');
        
        if (!code) {
          throw new Error('No auth code received');
        }
        
        console.log('🔄 Exchanging auth code for session...');
        status.textContent = 'Exchanging authentication code...';
        
        // This will use the code verifier from localStorage
        const { data, error } = await supabase.auth.exchangeCodeForSession(code);
        
        if (error) {
          console.error('❌ Exchange error:', error);
          status.textContent = 'Authentication failed. Redirecting...';
          setTimeout(() => {
            window.location.href = '/login?error=exchange_failed';
          }, 2000);
          return;
        }
        
        status.textContent = 'Authentication successful! Setting up your account...';
        console.log('✅ Successfully exchanged code for session:', data.user?.email);
        
        // Check if this is a new user and complete signup process
        try {
          const signupResponse = await fetch('/api/auth/complete-signup', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' }
          });
          
          const signupResult = await signupResponse.json();
          
          if (signupResult.success) {
            const redirectTo = signupResult.redirectTo || '/';
            const message = signupResult.isNewUser ? 'Welcome to meshOS!' : 'Welcome back!';
            
            status.textContent = `${message} Redirecting...`;
            
            setTimeout(() => {
              console.log('🔄 Redirecting to:', redirectTo);
              window.history.replaceState(null, '', '/');
              window.location.href = redirectTo;
            }, 1000);
          } else {
            throw new Error(signupResult.error || 'Signup completion failed');
          }
        } catch (signupError) {
          console.error('❌ Signup completion error:', signupError);
          // Fallback to normal redirect
          setTimeout(() => {
            console.log('🔄 Fallback redirect to home page');
            window.history.replaceState(null, '', '/');
            window.location.href = '/';
          }, 1000);
        }
        
      } catch (error) {
        console.error('❌ Auth exchange error:', error);
        status.textContent = 'Something went wrong. Redirecting...';
        setTimeout(() => {
          window.location.href = '/login?error=unexpected';
        }, 2000);
      }
    }
    
    // Start the exchange process
    handleAuthExchange();
  </script>
</body>
</html>


