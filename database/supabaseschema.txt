-- WARNING: This schema is for context only and is not meant to be run.
-- Table order and constraints may not be valid for execution.

CREATE TABLE public.agent_actions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  insight_id uuid,
  type text NOT NULL CHECK (type = ANY (ARRAY['notification'::text, 'habit_adjustment'::text, 'schedule_change'::text, 'intervention'::text, 'celebration'::text, 'reminder'::text])),
  title text NOT NULL,
  description text NOT NULL,
  priority text NOT NULL CHECK (priority = ANY (ARRAY['low'::text, 'medium'::text, 'high'::text])),
  timing text NOT NULL CHECK (timing = ANY (ARRAY['immediate'::text, 'today'::text, 'this_week'::text, 'this_month'::text])),
  automated boolean DEFAULT false,
  completed boolean DEFAULT false,
  completed_at timestamp with time zone,
  metadata jsonb DEFAULT '{}'::jsonb,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT agent_actions_pkey PRIMARY KEY (id),
  CONSTRAINT agent_actions_insight_id_fkey FOREIGN KEY (insight_id) REFERENCES public.agent_insights(id),
  CONSTRAINT agent_actions_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.agent_conversations (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  user_message text NOT NULL,
  agent_response text NOT NULL,
  context jsonb DEFAULT '{}'::jsonb,
  sentiment text DEFAULT 'neutral'::text CHECK (sentiment = ANY (ARRAY['positive'::text, 'neutral'::text, 'negative'::text])),
  actions_taken ARRAY DEFAULT '{}'::text[],
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT agent_conversations_pkey PRIMARY KEY (id),
  CONSTRAINT agent_conversations_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.agent_insights (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  type text NOT NULL CHECK (type = ANY (ARRAY['habit'::text, 'health'::text, 'finance'::text, 'content'::text, 'correlation'::text, 'prediction'::text, 'opportunity'::text])),
  title text NOT NULL,
  description text NOT NULL,
  confidence numeric CHECK (confidence >= 0::numeric AND confidence <= 1::numeric),
  impact text NOT NULL CHECK (impact = ANY (ARRAY['low'::text, 'medium'::text, 'high'::text])),
  urgency text NOT NULL CHECK (urgency = ANY (ARRAY['low'::text, 'medium'::text, 'high'::text])),
  category text,
  data jsonb DEFAULT '{}'::jsonb,
  actionable boolean DEFAULT true,
  archived boolean DEFAULT false,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT agent_insights_pkey PRIMARY KEY (id),
  CONSTRAINT agent_insights_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.agent_interventions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  type text NOT NULL CHECK (type = ANY (ARRAY['habit_rescue'::text, 'health_check'::text, 'finance_review'::text, 'goal_progress'::text])),
  title text NOT NULL,
  description text,
  scheduled_for timestamp with time zone NOT NULL,
  completed boolean DEFAULT false,
  completed_at timestamp with time zone,
  metadata jsonb DEFAULT '{}'::jsonb,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT agent_interventions_pkey PRIMARY KEY (id),
  CONSTRAINT agent_interventions_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.agent_memories (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  type text NOT NULL CHECK (type = ANY (ARRAY['insight'::text, 'conversation'::text, 'pattern'::text, 'goal'::text, 'achievement'::text])),
  content text NOT NULL,
  importance numeric CHECK (importance >= 0::numeric AND importance <= 1::numeric),
  tags ARRAY DEFAULT '{}'::text[],
  embedding USER-DEFINED,
  timestamp timestamp with time zone DEFAULT now(),
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT agent_memories_pkey PRIMARY KEY (id),
  CONSTRAINT agent_memories_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.ai_actions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  privy_user_id text NOT NULL,
  action_type text NOT NULL,
  description text NOT NULL,
  confidence numeric NOT NULL,
  executed boolean DEFAULT false,
  reasoning text,
  result jsonb DEFAULT '{}'::jsonb,
  conversation_id uuid,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT ai_actions_pkey PRIMARY KEY (id),
  CONSTRAINT ai_actions_conversation_id_fkey FOREIGN KEY (conversation_id) REFERENCES public.ai_conversations(id)
);
CREATE TABLE public.ai_conversations (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  session_id uuid DEFAULT gen_random_uuid(),
  message_type character varying CHECK (message_type::text = ANY (ARRAY['user'::character varying, 'assistant'::character varying, 'system'::character varying]::text[])),
  content text NOT NULL,
  context jsonb DEFAULT '{}'::jsonb,
  response_time_ms integer,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT ai_conversations_pkey PRIMARY KEY (id),
  CONSTRAINT ai_conversations_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.ai_insights (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  type character varying NOT NULL,
  category character varying,
  title character varying NOT NULL,
  description text,
  data_backing jsonb,
  confidence_score numeric CHECK (confidence_score >= 0::numeric AND confidence_score <= 1::numeric),
  impact_score integer CHECK (impact_score >= 1 AND impact_score <= 5),
  action_items jsonb DEFAULT '[]'::jsonb,
  is_read boolean DEFAULT false,
  is_dismissed boolean DEFAULT false,
  expires_at timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT ai_insights_pkey PRIMARY KEY (id),
  CONSTRAINT ai_insights_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.ai_usage_sessions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  session_start timestamp with time zone DEFAULT now(),
  session_end timestamp with time zone,
  message_count integer DEFAULT 0,
  response_tokens integer DEFAULT 0,
  actions_executed integer DEFAULT 0,
  total_token_cost integer DEFAULT 0,
  deducted boolean DEFAULT false,
  session_type character varying DEFAULT 'chat'::character varying,
  metadata jsonb DEFAULT '{}'::jsonb,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  privy_user_id text,
  CONSTRAINT ai_usage_sessions_pkey PRIMARY KEY (id),
  CONSTRAINT ai_usage_sessions_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.content_entries (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  user_id uuid NOT NULL,
  title text NOT NULL,
  type text NOT NULL,
  status text NOT NULL DEFAULT 'plan_to_watch'::text,
  rating integer CHECK (rating >= 1 AND rating <= 10),
  progress text,
  genre ARRAY,
  source text DEFAULT 'manual'::text,
  metadata jsonb DEFAULT '{}'::jsonb,
  started_at timestamp with time zone,
  completed_at timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT content_entries_pkey PRIMARY KEY (id),
  CONSTRAINT content_entries_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.goals (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  title text NOT NULL,
  description text,
  category text NOT NULL CHECK (category = ANY (ARRAY['health'::text, 'finance'::text, 'habits'::text, 'career'::text, 'relationships'::text])),
  target_date date,
  progress integer DEFAULT 0 CHECK (progress >= 0 AND progress <= 100),
  milestones jsonb DEFAULT '[]'::jsonb,
  priority text DEFAULT 'medium'::text CHECK (priority = ANY (ARRAY['low'::text, 'medium'::text, 'high'::text])),
  status text DEFAULT 'active'::text CHECK (status = ANY (ARRAY['active'::text, 'paused'::text, 'completed'::text, 'abandoned'::text])),
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT goals_pkey PRIMARY KEY (id),
  CONSTRAINT goals_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.habit_entries (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  habit_id uuid NOT NULL,
  user_id uuid NOT NULL,
  value integer DEFAULT 1,
  notes text,
  logged_at timestamp with time zone DEFAULT now(),
  created_at timestamp with time zone DEFAULT now(),
  date date,
  effort integer CHECK (effort >= 1 AND effort <= 5),
  duration integer,
  completion_time time without time zone,
  energy_level integer CHECK (energy_level >= 1 AND energy_level <= 5),
  mood integer CHECK (mood >= 1 AND mood <= 5),
  location text,
  weather text,
  context ARRAY,
  CONSTRAINT habit_entries_pkey PRIMARY KEY (id),
  CONSTRAINT habit_entries_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT habit_entries_habit_id_fkey FOREIGN KEY (habit_id) REFERENCES public.habits(id)
);
CREATE TABLE public.habit_scores (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  habit_id uuid,
  score numeric NOT NULL,
  date date NOT NULL,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT habit_scores_pkey PRIMARY KEY (id),
  CONSTRAINT habit_scores_habit_id_fkey FOREIGN KEY (habit_id) REFERENCES public.habits(id)
);
CREATE TABLE public.habits (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  user_id uuid NOT NULL,
  name text NOT NULL,
  description text,
  category text NOT NULL DEFAULT 'General'::text,
  type USER-DEFINED NOT NULL DEFAULT 'build'::habit_type,
  target_value integer DEFAULT 1,
  target_unit text DEFAULT 'times'::text,
  color text DEFAULT '#3b82f6'::text,
  streak_count integer DEFAULT 0,
  is_active boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  measurement_type text DEFAULT 'boolean'::text,
  best_streak integer DEFAULT 0,
  total_completions integer DEFAULT 0,
  position integer,
  CONSTRAINT habits_pkey PRIMARY KEY (id),
  CONSTRAINT habits_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.import_logs (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  import_type character varying NOT NULL,
  source character varying,
  status character varying DEFAULT 'processing'::character varying CHECK (status::text = ANY (ARRAY['processing'::character varying, 'completed'::character varying, 'failed'::character varying, 'partial'::character varying]::text[])),
  records_processed integer DEFAULT 0,
  records_imported integer DEFAULT 0,
  error_log jsonb DEFAULT '[]'::jsonb,
  file_hash character varying,
  metadata jsonb DEFAULT '{}'::jsonb,
  created_at timestamp with time zone DEFAULT now(),
  completed_at timestamp with time zone,
  CONSTRAINT import_logs_pkey PRIMARY KEY (id),
  CONSTRAINT import_logs_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.integrations (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  service_name character varying NOT NULL,
  service_type character varying,
  connection_status character varying DEFAULT 'active'::character varying CHECK (connection_status::text = ANY (ARRAY['active'::character varying, 'inactive'::character varying, 'error'::character varying, 'pending'::character varying]::text[])),
  credentials_encrypted text,
  refresh_token_encrypted text,
  last_sync timestamp with time zone,
  sync_frequency_hours integer DEFAULT 24,
  sync_enabled boolean DEFAULT true,
  settings jsonb DEFAULT '{}'::jsonb,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT integrations_pkey PRIMARY KEY (id),
  CONSTRAINT integrations_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.life_patterns (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  type text NOT NULL,
  description text NOT NULL,
  confidence numeric CHECK (confidence >= 0::numeric AND confidence <= 1::numeric),
  frequency text NOT NULL,
  impact text NOT NULL CHECK (impact = ANY (ARRAY['positive'::text, 'negative'::text, 'neutral'::text])),
  triggers ARRAY DEFAULT '{}'::text[],
  outcomes ARRAY DEFAULT '{}'::text[],
  data jsonb DEFAULT '{}'::jsonb,
  first_detected timestamp with time zone DEFAULT now(),
  last_confirmed timestamp with time zone DEFAULT now(),
  confirmation_count integer DEFAULT 1,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT life_patterns_pkey PRIMARY KEY (id),
  CONSTRAINT life_patterns_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.metrics (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  user_id uuid NOT NULL,
  type text NOT NULL,
  value numeric NOT NULL,
  unit text,
  category text,
  metadata jsonb DEFAULT '{}'::jsonb,
  recorded_at timestamp with time zone DEFAULT now(),
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT metrics_pkey PRIMARY KEY (id),
  CONSTRAINT metrics_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.optimizations (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  domain text NOT NULL,
  current_state text NOT NULL,
  optimized_state text NOT NULL,
  expected_gain text NOT NULL,
  effort text NOT NULL CHECK (effort = ANY (ARRAY['low'::text, 'medium'::text, 'high'::text])),
  timeframe text NOT NULL,
  steps ARRAY DEFAULT '{}'::text[],
  status text DEFAULT 'suggested'::text CHECK (status = ANY (ARRAY['suggested'::text, 'in_progress'::text, 'completed'::text, 'abandoned'::text])),
  implemented_at timestamp with time zone,
  results text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT optimizations_pkey PRIMARY KEY (id),
  CONSTRAINT optimizations_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.privy_users (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  privy_id text NOT NULL UNIQUE,
  email text,
  phone text,
  wallet_address text,
  linked_accounts jsonb DEFAULT '[]'::jsonb,
  is_active boolean DEFAULT true,
  email_verified boolean DEFAULT false,
  phone_verified boolean DEFAULT false,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  last_login timestamp with time zone,
  metadata jsonb DEFAULT '{}'::jsonb,
  CONSTRAINT privy_users_pkey PRIMARY KEY (id)
);
CREATE TABLE public.profiles (
  id uuid NOT NULL,
  username text UNIQUE,
  full_name text,
  avatar_url text,
  settings jsonb DEFAULT '{}'::jsonb,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT profiles_pkey PRIMARY KEY (id),
  CONSTRAINT profiles_id_fkey FOREIGN KEY (id) REFERENCES auth.users(id)
);
CREATE TABLE public.risk_factors (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  category text NOT NULL,
  risk text NOT NULL,
  probability numeric CHECK (probability >= 0::numeric AND probability <= 1::numeric),
  impact text NOT NULL CHECK (impact = ANY (ARRAY['low'::text, 'medium'::text, 'high'::text])),
  prevention ARRAY DEFAULT '{}'::text[],
  early_warnings ARRAY DEFAULT '{}'::text[],
  status text DEFAULT 'active'::text CHECK (status = ANY (ARRAY['active'::text, 'mitigated'::text, 'occurred'::text])),
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT risk_factors_pkey PRIMARY KEY (id),
  CONSTRAINT risk_factors_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.subscriptions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid UNIQUE,
  plan_type character varying DEFAULT 'free'::character varying CHECK (plan_type::text = ANY (ARRAY['free'::character varying, 'trial'::character varying, 'premium'::character varying]::text[])),
  status character varying DEFAULT 'active'::character varying CHECK (status::text = ANY (ARRAY['active'::character varying, 'cancelled'::character varying, 'suspended'::character varying, 'expired'::character varying]::text[])),
  trial_start timestamp with time zone,
  trial_end timestamp with time zone,
  billing_cycle character varying DEFAULT 'monthly'::character varying CHECK (billing_cycle::text = ANY (ARRAY['monthly'::character varying, 'yearly'::character varying]::text[])),
  amount_cents integer DEFAULT 100,
  currency character varying DEFAULT 'USD'::character varying,
  payment_method character varying,
  stripe_customer_id character varying,
  stripe_subscription_id character varying,
  razorpay_customer_id character varying,
  razorpay_subscription_id character varying,
  next_billing_date timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT subscriptions_pkey PRIMARY KEY (id),
  CONSTRAINT subscriptions_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.task_sessions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  task_id uuid NOT NULL,
  user_id uuid NOT NULL,
  started_at timestamp with time zone NOT NULL,
  ended_at timestamp with time zone,
  duration integer,
  session_type text DEFAULT 'work'::text CHECK (session_type = ANY (ARRAY['work'::text, 'break'::text, 'review'::text, 'planning'::text])),
  notes text,
  productivity_score integer CHECK (productivity_score >= 1 AND productivity_score <= 10),
  energy_level integer CHECK (energy_level >= 1 AND energy_level <= 10),
  mood text,
  context text,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT task_sessions_pkey PRIMARY KEY (id),
  CONSTRAINT task_sessions_task_id_fkey FOREIGN KEY (task_id) REFERENCES public.tasks(id),
  CONSTRAINT task_sessions_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.tasks (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  title text NOT NULL,
  description text,
  category text NOT NULL DEFAULT 'General'::text,
  priority text NOT NULL DEFAULT 'medium'::text CHECK (priority = ANY (ARRAY['low'::text, 'medium'::text, 'high'::text])),
  status text NOT NULL DEFAULT 'todo'::text CHECK (status = ANY (ARRAY['todo'::text, 'in_progress'::text, 'completed'::text, 'on_hold'::text])),
  estimated_duration integer,
  due_date timestamp with time zone,
  scheduled_for timestamp with time zone,
  completed_at timestamp with time zone,
  energy_required text DEFAULT 'medium'::text CHECK (energy_required = ANY (ARRAY['low'::text, 'medium'::text, 'high'::text])),
  complexity text DEFAULT 'moderate'::text CHECK (complexity = ANY (ARRAY['simple'::text, 'moderate'::text, 'complex'::text])),
  location text,
  context jsonb DEFAULT '[]'::jsonb,
  tags jsonb DEFAULT '[]'::jsonb,
  email_reminders boolean DEFAULT false,
  notes text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT tasks_pkey PRIMARY KEY (id),
  CONSTRAINT tasks_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.token_earning_opportunities (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  opportunity_type character varying NOT NULL,
  name character varying NOT NULL,
  description text,
  token_reward integer NOT NULL,
  max_claims_per_user integer DEFAULT 1,
  conditions jsonb DEFAULT '{}'::jsonb,
  is_active boolean DEFAULT true,
  start_date timestamp with time zone DEFAULT now(),
  end_date timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT token_earning_opportunities_pkey PRIMARY KEY (id)
);
CREATE TABLE public.token_packages (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name character varying NOT NULL,
  description text,
  token_amount integer NOT NULL,
  price_inr integer NOT NULL,
  bonus_tokens integer DEFAULT 0,
  is_active boolean DEFAULT true,
  display_order integer DEFAULT 1,
  stripe_price_id text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT token_packages_pkey PRIMARY KEY (id)
);
CREATE TABLE public.token_transactions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  transaction_type character varying NOT NULL CHECK (transaction_type::text = ANY (ARRAY['earn'::character varying, 'spend'::character varying, 'refund'::character varying, 'bonus'::character varying, 'purchase'::character varying]::text[])),
  amount integer NOT NULL,
  related_entity_type character varying,
  related_entity_id uuid,
  description text NOT NULL,
  metadata jsonb DEFAULT '{}'::jsonb,
  balance_before integer NOT NULL,
  balance_after integer NOT NULL,
  created_at timestamp with time zone DEFAULT now(),
  processed_at timestamp with time zone DEFAULT now(),
  privy_user_id text,
  CONSTRAINT token_transactions_pkey PRIMARY KEY (id),
  CONSTRAINT token_transactions_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.transactions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  subscription_id uuid,
  transaction_type character varying CHECK (transaction_type::text = ANY (ARRAY['payment'::character varying, 'refund'::character varying, 'chargeback'::character varying]::text[])),
  amount_cents integer NOT NULL,
  currency character varying DEFAULT 'USD'::character varying,
  status character varying CHECK (status::text = ANY (ARRAY['pending'::character varying, 'completed'::character varying, 'failed'::character varying, 'cancelled'::character varying]::text[])),
  payment_method character varying,
  external_transaction_id character varying,
  gateway character varying,
  gateway_response jsonb,
  created_at timestamp with time zone DEFAULT now(),
  processed_at timestamp with time zone,
  CONSTRAINT transactions_pkey PRIMARY KEY (id),
  CONSTRAINT transactions_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT transactions_subscription_id_fkey FOREIGN KEY (subscription_id) REFERENCES public.subscriptions(id)
);
CREATE TABLE public.user_ai_preferences (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid UNIQUE,
  communication_style text DEFAULT 'motivational'::text CHECK (communication_style = ANY (ARRAY['casual'::text, 'formal'::text, 'motivational'::text, 'analytical'::text])),
  notification_frequency text DEFAULT 'moderate'::text CHECK (notification_frequency = ANY (ARRAY['minimal'::text, 'moderate'::text, 'frequent'::text])),
  focus_areas ARRAY DEFAULT '{habits}'::text[],
  privacy_level text DEFAULT 'selective'::text CHECK (privacy_level = ANY (ARRAY['open'::text, 'selective'::text, 'private'::text])),
  agent_name text DEFAULT 'Mesh'::text,
  daily_briefing_time time without time zone DEFAULT '08:00:00'::time without time zone,
  weekly_report_day integer DEFAULT 1 CHECK (weekly_report_day >= 0 AND weekly_report_day <= 6),
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT user_ai_preferences_pkey PRIMARY KEY (id),
  CONSTRAINT user_ai_preferences_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.user_preferences (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid UNIQUE,
  theme character varying DEFAULT 'dark'::character varying,
  accent_color character varying DEFAULT '#8b5cf6'::character varying,
  enabled_modules jsonb DEFAULT '["habits", "tasks", "health", "finance", "content"]'::jsonb,
  module_order jsonb DEFAULT '["habits", "tasks", "health", "finance", "content"]'::jsonb,
  dashboard_layout jsonb DEFAULT '{}'::jsonb,
  ai_personality character varying DEFAULT 'professional'::character varying,
  ai_proactivity_level integer DEFAULT 3 CHECK (ai_proactivity_level >= 1 AND ai_proactivity_level <= 5),
  data_retention_days integer DEFAULT 365,
  share_analytics boolean DEFAULT false,
  subscription_status character varying DEFAULT 'trial'::character varying,
  trial_end_date timestamp with time zone DEFAULT (now() + '30 days'::interval),
  subscription_id character varying,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  trial_end timestamp with time zone,
  trial_started timestamp with time zone,
  CONSTRAINT user_preferences_pkey PRIMARY KEY (id),
  CONSTRAINT user_preferences_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.user_token_earnings (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  opportunity_id uuid,
  tokens_earned integer NOT NULL,
  claimed_at timestamp with time zone DEFAULT now(),
  progress_data jsonb DEFAULT '{}'::jsonb,
  privy_user_id text,
  CONSTRAINT user_token_earnings_pkey PRIMARY KEY (id),
  CONSTRAINT user_token_earnings_opportunity_id_fkey FOREIGN KEY (opportunity_id) REFERENCES public.token_earning_opportunities(id),
  CONSTRAINT user_token_earnings_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.user_tokens (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid UNIQUE,
  balance integer NOT NULL DEFAULT 5000 CHECK (balance >= 0),
  privy_wallet_address text,
  privy_user_id text,
  wallet_type character varying DEFAULT 'privy'::character varying,
  total_earned integer NOT NULL DEFAULT 5000,
  total_spent integer NOT NULL DEFAULT 0,
  last_transaction_at timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT user_tokens_pkey PRIMARY KEY (id),
  CONSTRAINT user_tokens_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.waitlist (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  email character varying NOT NULL UNIQUE,
  interest_area character varying DEFAULT 'everything'::character varying,
  referrer text,
  user_agent text,
  signup_date timestamp with time zone DEFAULT now(),
  activated boolean DEFAULT false,
  activation_date timestamp with time zone,
  notes text,
  CONSTRAINT waitlist_pkey PRIMARY KEY (id)
);