pasting here some files from 2 weeks back, when auth was working

middleware.ts 
// src/middleware.ts
import { defineMiddleware } from 'astro/middleware'
import { createServerClient } from './lib/supabase/server'

export const onRequest = defineMiddleware(async (context, next) => {
  const supabase = createServerClient(context.cookies);
  
  // Store supabase for server-side use in all routes (including API routes)
  context.locals.supabase = supabase;

  // Public routes that don't need auth
  const publicRoutes = ['/login', '/auth/callback', '/auth/exchange'];
  const isPublicRoute = publicRoutes.some(route => 
    context.url.pathname === route
  );
  
  // Skip auth check for public routes and API routes (except for specific API routes that need auth)
  if (isPublicRoute || context.url.pathname.startsWith('/api/')) {
    // For API routes, we still need the supabase client initialized with cookies,
    // but we don't necessarily need to perform an auth check here.
    // Individual API routes can decide if they need authentication.
    return next();
  }
  
  try {
    // USE getUser() instead of getSession() to avoid the warning
    const { data: { user }, error } = await supabase.auth.getUser();
    
    // Only log for page routes, not API routes
    console.log('üîç Auth Check:', {
      path: context.url.pathname,
      hasUser: !!user,
      userEmail: user?.email,
      error: error?.message
    });

    // Store user for server-side use
    context.locals.user = user;

    // Protected routes
    const protectedRoutes = ['/', '/dashboard', '/habits', '/health', '/finance', '/content', '/tasks', '/import'];
    const isProtectedRoute = protectedRoutes.some(route => 
      context.url.pathname.startsWith(route)
    );

    if (isProtectedRoute && !user) {
      console.log('‚ùå No user found, redirecting to login');
      return context.redirect('/login');
    }

    return next();
  } catch (error) {
    console.error('‚ùå Auth middleware error:', error);
    return context.redirect('/login');
  }
});


exchange.astro
---
// This page handles the PKCE exchange on the client side
---

<!DOCTYPE html>
<html>
<head>
  <title>Completing Login...</title>
</head>
<body>
  <div style="display: flex; align-items: center; justify-content: center; height: 100vh; font-family: system-ui;">
    <div style="text-align: center;">
      <div style="margin-bottom: 20px;">üîÑ</div>
      <p>Completing your login...</p>
    </div>
  </div>

  <script>
    import { supabase } from '../../lib/supabase/client.ts';
    
    async function handleAuthExchange() {
      try {
        const urlParams = new URLSearchParams(window.location.search);
        const code = urlParams.get('code');
        
        if (!code) {
          throw new Error('No auth code received');
        }
        
        console.log('Exchanging code for session...');
        
        // This will use the code verifier from localStorage
        const { data, error } = await supabase.auth.exchangeCodeForSession(code);
        
        if (error) {
          console.error('Exchange error:', error);
          window.location.href = '/login?error=exchange_failed';
          return;
        }
        
        console.log('‚úÖ Successfully exchanged code for session:', data.user?.email);
        
        // Clear the URL and redirect to dashboard
        window.history.replaceState(null, '', '/');
        window.location.href = '/';
        
      } catch (error) {
        console.error('Auth exchange error:', error);
        window.location.href = '/login?error=unexpected';
      }
    }
    
    // Start the exchange process
    handleAuthExchange();
  </script>
</body>
</html>

callback.astro
---
import { createServerClient } from '../../lib/supabase/server';

const supabase = createServerClient(Astro.cookies);

const code = Astro.url.searchParams.get('code');

if (!code) {
  console.error('No authorization code received');
  return Astro.redirect('/login?error=no_code');
}

try {
  // For PKCE flow, we need to handle this differently
  // The code verifier should be in localStorage, but server can't access it
  // So we need to do the exchange on the client side
  
  console.log('‚úÖ Got auth code, redirecting to client for PKCE exchange');
  
  // Redirect to a client-side handler that can access localStorage
  return Astro.redirect(`/auth/exchange?code=${code}`);

} catch (error) {
  console.error('Auth callback error:', error);
  return Astro.redirect('/login?error=unexpected');
}
---

<html><body><p>Processing...</p></body></html>

login.astro
---
// src/pages/login.astro - WORKING VERSION
import Layout from '../layouts/Layout.astro';
---

<Layout title="Login - MeshOS">
  <div class="min-h-screen flex items-center justify-center bg-background">
    <div class="card w-full max-w-md">
      <div class="text-center mb-8">
        <div class="w-12 h-12 bg-accent-primary rounded-lg flex items-center justify-center mx-auto mb-4">
          <span class="text-xl font-bold text-white">M</span>
        </div>
        <h1 class="text-3xl font-semibold text-text-primary mb-2">
          Welcome to MeshOS
        </h1>
        <p class="text-text-secondary">Your personal life operating system</p>
      </div>
      
      <div class="space-y-4">
        <button 
          id="google-signin" 
          class="w-full flex items-center justify-center px-4 py-3 bg-accent-primary/10 hover:bg-accent-primary/20 border border-accent-primary/20 text-accent-primary rounded-lg transition-colors"
        >
          <svg class="w-5 h-5 mr-3" viewBox="0 0 24 24">
            <path fill="currentColor" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
            <path fill="currentColor" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
            <path fill="currentColor" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
            <path fill="currentColor" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
          </svg>
          Continue with Google
        </button>

        <div id="status" class="text-center text-sm text-text-muted"></div>
      </div>
    </div>
  </div>
</Layout>

<script>
 import { supabase } from '../lib/supabase/client.ts';

document.getElementById('google-signin')?.addEventListener('click', async () => {
  console.log('Starting OAuth...');
  
  const { error } = await supabase.auth.signInWithOAuth({
    provider: 'google',
    options: {
      redirectTo: `${window.location.origin}/auth/callback`
    }
  });
  
  if (error) {
    console.error('OAuth error:', error);
    alert('Login failed: ' + error.message);
  }
});

simple.ts
import { supabase } from '../supabase/client';

// SINGLE USER HARDCODED AUTH
const ALLOWED_EMAIL = 'ketaminedevs@gmail.com';

export class SimpleAuth {
  private static user: any = null;
  private static isReady = false;

  static async initialize() {
    if (this.isReady) return this.user;

    try {
      const { data: { session } } = await supabase.auth.getSession();
      
      if (session?.user?.email === ALLOWED_EMAIL) {
        this.user = session.user;
        console.log('‚úÖ User authenticated:', this.user.email);
      } else {
        console.log('‚ùå Unauthorized user');
      }
    } catch (error) {
      console.error('Auth initialization error:', error);
    }

    this.isReady = true;
    return this.user;
  }

  static getCurrentUser() {
    return this.user;
  }

  static isAuthenticated() {
    return this.user?.email === ALLOWED_EMAIL;
  }

  static async signInWithGoogle() {
    try {
      const { error } = await supabase.auth.signInWithOAuth({
        provider: 'google',
        options: {
          redirectTo: window.location.origin + '/?auth=success'
        }
      });
      
      if (error) throw error;
      return { success: true };
    } catch (error: any) {
      console.error('Login error:', error);
      return { 
        success: false, 
        error: error.message || 'Login failed' 
      };
    }
  }

  static async signOut() {
    try {
      await supabase.auth.signOut();
      this.user = null;
      window.location.href = '/login';
    } catch (error) {
      console.error('Logout error:', error);
    }
  }
}

// Automatically check authentication on script load
if (typeof window !== 'undefined') {
  SimpleAuth.initialize();
}

ServerAUTH.ts
// src/lib/auth/serverAuth.ts
import type { AstroCookies } from 'astro';
// Since you're the only user, we can simplify server-side auth
export function getServerUser(cookies: AstroCookies) {
  const supabaseUrl = import.meta.env.PUBLIC_SUPABASE_URL;
  const projectRef = supabaseUrl.split('.')[0].split('//')[1];

  const authCookieNames = [
    `sb-${projectRef}-auth-token`,
    `sb-${projectRef}-auth-token.0`, 
    `sb-${projectRef}-auth-token.1`
  ];

  // Check for any auth cookie
  for (const cookieName of authCookieNames) {
    const cookie = cookies.get(cookieName);
    if (cookie) {
      try {
        const cookieData = JSON.parse(cookie.value);
        // Validate the user's email against a known email for simplified auth
        if (cookieData.user?.email === 'ketaminedevs@gmail.com') {
          return {
            id: '368deac7-8526-45eb-927a-6a373c95d8c6', // Your known user ID
            email: 'ketaminedevs@gmail.com'
          };
        }
      } catch (e) {
        // Cookie parsing failed, continue to next cookie
        continue;
      }
    }
  }

  return null;
}

export function requireAuth(cookies: AstroCookies) {
  const user = getServerUser(cookies);
  if (!user) {
    throw new Error('Authentication required');
  }
  return user;
}

helper.ts
// src/lib/auth/helper.ts
import type { AstroCookies } from 'astro';
import { createServerClient } from '../supabase/server';

export async function getAuthenticatedUser(cookies: AstroCookies) {
  const supabase = createServerClient(cookies);
  
  // First try to get the session
  let { data: { session }, error } = await supabase.auth.getSession();
  
  console.log('üîç Initial session attempt:', session ? 'found' : 'not found');
  
  if (error) {
    console.error('Session error:', error);
  }
  
  // If no session, try to refresh
  if (!session) {
    console.log('üîÑ Attempting to refresh session...');
    const refreshResult = await supabase.auth.refreshSession();
    
    if (refreshResult.data.session) {
      console.log('‚úÖ Session refreshed successfully');
      session = refreshResult.data.session;
    } else {
      console.log('‚ùå Session refresh failed:', refreshResult.error);
    }
  }
  
  // If we have a session, try to get user details
  if (session) {
    const { data: { user }, error: userError } = await supabase.auth.getUser();
    
    if (userError) {
      console.error('User fetch error:', userError);
      return { session: null, user: null, supabase };
    }
    
    console.log('üë§ User fetched:', user ? user.email : 'none');
    return { session, user, supabase };
  }
  
  return { session: null, user: null, supabase };
}

supabase\client.ts
import { createClient } from '@supabase/supabase-js';
import type { Database } from '../../types/supabase';

const supabaseUrl = import.meta.env.PUBLIC_SUPABASE_URL;
const supabaseKey = import.meta.env.PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  throw new Error('Missing Supabase environment variables');
}

export const supabase = createClient<Database>(supabaseUrl, supabaseKey, {
  auth: {
    flowType: 'pkce',
    autoRefreshToken: true,
    detectSessionInUrl: false, // We handle this manually now
    persistSession: true,
    storage: {
      // Custom storage that also sets cookies
      getItem: (key: string) => {
        const value = localStorage.getItem(key);
        return Promise.resolve(value);
      },
      setItem: (key: string, value: string) => {
        localStorage.setItem(key, value);
        
        // Also set as cookie for server access
        if (key.includes('auth-token')) {
          document.cookie = `${key}=${value}; path=/; max-age=604800; SameSite=Lax`;
        }
        
        return Promise.resolve();
      },
      removeItem: (key: string) => {
        localStorage.removeItem(key);
        
        // Also remove cookie
        if (key.includes('auth-token')) {
          document.cookie = `${key}=; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT`;
        }
        
        return Promise.resolve();
      }
    }
  }
});

// Auth state change handler
supabase.auth.onAuthStateChange(async (event, session) => {
  console.log('Auth event:', event);
  
  if (event === 'SIGNED_IN' && session) {
    console.log('‚úÖ User signed in:', session.user.email);
    
    // Force set session cookie for server access
    const tokenKey = `sb-${supabaseUrl.split('//')[1].split('.')[0]}-auth-token`;
    const tokenValue = JSON.stringify({
      access_token: session.access_token,
      refresh_token: session.refresh_token,
      expires_at: session.expires_at,
      user: session.user
    });
    
    document.cookie = `${tokenKey}=${tokenValue}; path=/; max-age=604800; SameSite=Lax`;
    
    console.log('üç™ Session cookie set for server');
  }
});

supabase\server.ts
// src/lib/supabase/server.ts
import { createServerClient as createSupabaseServerClient } from '@supabase/ssr'
import type { Database } from '../../types/supabase'
import type { AstroCookies } from 'astro'

export function createServerClient(cookies: AstroCookies) {
  return createSupabaseServerClient<Database>(
    import.meta.env.PUBLIC_SUPABASE_URL!,
    import.meta.env.PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        get(name: string) {
          const cookie = cookies.get(name);
          return cookie?.value;
        },
        set(name: string, value: string, options: any) {
          cookies.set(name, value, {
            ...options,
            httpOnly: false,
            secure: false,
            sameSite: 'lax',
            path: '/'
          });
        },
        remove(name: string, options: any) {
          cookies.delete(name, options);
        },
      },
    }
  )
}