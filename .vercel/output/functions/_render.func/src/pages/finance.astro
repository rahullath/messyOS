---
// src/pages/finance.astro - COMPLETE FINANCE TRACKING
import DashboardLayout from '../layouts/DashboardLayout.astro';
import { createServerClient } from '../lib/supabase/server';

const supabase = createServerClient(Astro.cookies);

// Get the user from session
const { data: { user } } = await supabase.auth.getUser();

if (!user) {
  return Astro.redirect('/login');
}

// Fetch financial metrics from the last 6 months
const sixMonthsAgo = new Date();
sixMonthsAgo.setMonth(sixMonthsAgo.getMonth() - 6);

const { data: financeMetrics, error } = await supabase
  .from('metrics')
  .select('type, value, unit, metadata, recorded_at')
  .eq('user_id', user.id)
  .in('type', ['expense', 'income', 'crypto_value'])
  .gte('recorded_at', sixMonthsAgo.toISOString())
  .order('recorded_at', { ascending: false });

if (error) {
  console.error('Error fetching finance metrics:', error);
}

// Process financial data
const metrics = financeMetrics || [];

// Group by type
const expenses = metrics.filter(m => m.type === 'expense');
const cryptoHoldings = metrics.filter(m => m.type === 'crypto_value');  // ‚úÖ Correct type
const cryptoValue = cryptoHoldings.reduce((sum, c) => sum + c.value, 0); // ‚úÖ Direct calculation
const bankTransactions = metrics.filter(m => m.type === 'bank_transaction');
const monthlyExpensesMetrics = metrics.filter(m => m.type === 'monthly_expenses');
// Removed cryptoPortfolioMetrics as it's no longer needed with direct calculation

// Calculate key statistics
const totalExpenses = expenses.reduce((sum, e) => sum + e.value, 0);
const monthlyExpenses = monthlyExpensesMetrics.length > 0 ? monthlyExpensesMetrics[0].value : totalExpenses;
// cryptoValue is now directly calculated above

// Calculate financial runway (assuming current balance)
const currentBalance = 94300; // From your analysis: ‚Çπ38,500 + ‚Çπ55,800 June salary
const runway = currentBalance / (monthlyExpenses || 40546);

// Categorize expenses
const expensesByCategory = new Map<string, number>();
for (const expense of expenses) {
  const category = expense.metadata?.category || 'Other';
  expensesByCategory.set(category, (expensesByCategory.get(category) || 0) + expense.value);
}

const topCategories = Array.from(expensesByCategory.entries())
  .map(([category, amount]) => ({
    category,
    amount,
    percentage: (amount / totalExpenses) * 100
  }))
  .sort((a, b) => b.amount - a.amount)
  .slice(0, 6);

// Budget health calculation
const budgetScore = calculateBudgetHealth(monthlyExpenses, runway, cryptoHoldings.length);

// Recent transactions
const recentTransactions = expenses
  .slice(0, 10)
  .map(expense => ({
    date: expense.recorded_at,
    description: expense.metadata?.description || 'Unknown expense',
    amount: expense.value,
    category: expense.metadata?.category || 'Other',
    vendor: expense.metadata?.vendor || 'Unknown'
  }));

// Check if we have financial data
const hasFinanceData = metrics.length > 0;

// Monthly trend (simplified)
const expensesTrend = [
  { month: 'Mar', amount: 45000 },
  { month: 'Apr', amount: 42000 },
  { month: 'May', amount: 41000 },
  { month: 'Jun', amount: monthlyExpenses }
];

function calculateBudgetHealth(monthlyExp: number, runwayMonths: number, cryptoCount: number): { score: number; status: string; recommendations: string[] } {
  let score = 100;
  const recommendations: string[] = [];
  
  // Expense control (40 points)
  if (monthlyExp > 45000) {
    score -= 20;
    recommendations.push('Reduce monthly expenses from ‚Çπ' + monthlyExp.toLocaleString() + ' to ‚Çπ35,000 target');
  } else if (monthlyExp > 35000) {
    score -= 10;
    recommendations.push('Optimize spending to reach ‚Çπ35,000/month budget for better runway');
  }
  
  // Runway assessment (30 points)
  if (runwayMonths < 2) {
    score -= 20;
    recommendations.push('Critical: Less than 2 months runway. Find job immediately or reduce expenses by 50%');
  } else if (runwayMonths < 3) {
    score -= 10;
    recommendations.push('Focus on job search - less than 3 months runway remaining');
  }
  
  // Portfolio diversity (20 points)
  if (cryptoCount < 3) {
    score -= 10;
    recommendations.push('Consider diversifying crypto portfolio beyond current ' + cryptoCount + ' holdings');
  }
  
  // Add optimization recommendations
  if (recommendations.length === 0) {
    recommendations.push('Your budget is well-optimized! Focus on increasing income through job search.');
  }
  
  if (monthlyExp > 40000) {
    recommendations.push('Target MK Retail reduction: from ‚Çπ3,053 to ‚Çπ1,500/month saves ‚Çπ1,553');
    recommendations.push('Cut convenience purchases (energy drinks, candy) by 50% saves ‚Çπ500/month');
  }
  
  const status = score >= 80 ? 'excellent' : score >= 60 ? 'good' : score >= 40 ? 'warning' : 'critical';
  
  return { score: Math.max(0, score), status, recommendations };
}

const financeStats = {
  monthlyExpenses,
  cryptoValue,
  currentBalance,
  runway,
  topCategories,
  expensesTrend,
  cryptoHoldings: cryptoHoldings.map(c => ({
    symbol: c.metadata?.symbol || 'UNKNOWN',
    value: c.value,
    quantity: c.metadata?.quantity || 0,
    chain: c.metadata?.chain || 'Unknown',
    change24h: c.metadata?.change24h || 0
  })),
  recentTransactions,
  budgetHealth: budgetScore
};
---

<DashboardLayout title="Finance - MeshOS">
  <div class="space-y-8">
    <!-- Header -->
    <div class="flex items-center justify-between">
      <div>
        <h1 class="text-3xl font-semibold text-text-primary mb-2">Finance Dashboard</h1>
        <p class="text-text-secondary">
          Track expenses, manage crypto portfolio, and optimize your financial runway
        </p>
      </div>
      <div class="flex space-x-3">
        <button 
          id="import-finance-btn"
          class="flex items-center px-4 py-2 bg-accent-warning text-white rounded-lg hover:bg-accent-warning/90 transition-colors"
        >
          <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path>
          </svg>
          Import Financial Data
        </button>
        <button 
          id="log-expense-btn"
          class="flex items-center px-4 py-2 bg-accent-primary text-white rounded-lg hover:bg-accent-primary/90 transition-colors"
        >
          <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
          </svg>
          Log Expense
        </button>
      </div>
    </div>

    {hasFinanceData ? (
      <!-- Finance Dashboard with Real Data -->
      <div>
        <!-- Key Financial Metrics -->
        <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
          <!-- Monthly Expenses -->
          <div class="card p-6">
            <div class="flex items-center justify-between">
              <div>
                <p class="text-sm font-medium text-text-muted">Monthly Expenses</p>
                <p class="text-2xl font-semibold text-text-primary mt-1">
                  ‚Çπ{monthlyExpenses.toLocaleString()}
                </p>
                <p class={`text-sm mt-1 ${
                  monthlyExpenses > 45000 ? 'text-accent-error' :
                  monthlyExpenses > 35000 ? 'text-accent-warning' : 'text-accent-success'
                }`}>
                  {monthlyExpenses > 45000 ? 'High' : 
                   monthlyExpenses > 35000 ? 'Moderate' : 'Optimized'}
                </p>
              </div>
              <div class="w-12 h-12 bg-accent-error/10 rounded-lg flex items-center justify-center">
                <span class="text-2xl">üí∏</span>
              </div>
            </div>
          </div>

          <!-- Crypto Portfolio -->
          <div class="card p-6">
            <div class="flex items-center justify-between">
              <div>
                <p class="text-sm font-medium text-text-muted">Crypto Portfolio</p>
                <p class="text-2xl font-semibold text-text-primary mt-1">
                  ${cryptoValue.toFixed(2)}
                </p>
                <p class="text-sm text-text-muted mt-1">‚Çπ{(cryptoValue * 83).toLocaleString()}</p>
              </div>
              <div class="w-12 h-12 bg-accent-warning/10 rounded-lg flex items-center justify-center">
                <span class="text-2xl">‚Çø</span>
              </div>
            </div>
          </div>

          <!-- Financial Runway -->
          <div class="card p-6">
            <div class="flex items-center justify-between">
              <div>
                <p class="text-sm font-medium text-text-muted">Financial Runway</p>
                <p class="text-2xl font-semibold text-text-primary mt-1">
                  {runway.toFixed(1)}
                </p>
                <p class={`text-sm mt-1 ${
                  runway >= 3 ? 'text-accent-success' :
                  runway >= 2 ? 'text-accent-warning' : 'text-accent-error'
                }`}>
                  months left
                </p>
              </div>
              <div class="w-12 h-12 bg-accent-primary/10 rounded-lg flex items-center justify-center">
                <span class="text-2xl">‚è±Ô∏è</span>
              </div>
            </div>
          </div>

          <!-- Budget Health -->
          <div class="card p-6">
            <div class="flex items-center justify-between">
              <div>
                <p class="text-sm font-medium text-text-muted">Budget Health</p>
                <p class="text-2xl font-semibold text-text-primary mt-1">
                  {budgetScore.score}/100
                </p>
                <p class={`text-sm mt-1 capitalize ${
                  budgetScore.status === 'excellent' ? 'text-accent-success' :
                  budgetScore.status === 'good' ? 'text-accent-primary' :
                  budgetScore.status === 'warning' ? 'text-accent-warning' : 'text-accent-error'
                }`}>
                  {budgetScore.status}
                </p>
              </div>
              <div class="w-12 h-12 bg-accent-success/10 rounded-lg flex items-center justify-center">
                <span class="text-2xl">üìä</span>
              </div>
            </div>
          </div>
        </div>

        <!-- Expense Categories -->
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
          <div class="card p-6">
            <h3 class="text-lg font-semibold text-text-primary mb-4">Top Expense Categories</h3>
            <div class="space-y-4">
              {topCategories.map((category, index) => (
                <div class="space-y-2">
                  <div class="flex items-center justify-between">
                    <span class="text-text-primary font-medium">{category.category}</span>
                    <span class="text-text-secondary">‚Çπ{category.amount.toLocaleString()}</span>
                  </div>
                  <div class="w-full bg-surface-hover rounded-full h-2">
                    <div 
                      class="h-2 rounded-full bg-accent-primary"
                      style={`width: ${Math.min(category.percentage, 100)}%`}
                    ></div>
                  </div>
                  <div class="flex items-center justify-between text-xs">
                    <span class="text-text-muted">{category.percentage.toFixed(1)}% of total</span>
                    <span class="text-text-muted">
                      ‚Çπ{Math.round(category.amount / 30).toLocaleString()}/day avg
                    </span>
                  </div>
                </div>
              ))}
            </div>
          </div>

          <!-- Recent Transactions -->
          <div class="card p-6">
            <h3 class="text-lg font-semibold text-text-primary mb-4">Recent Transactions</h3>
            <div class="space-y-3">
              {recentTransactions.slice(0, 8).map((transaction, index) => (
                <div class="flex items-center justify-between p-3 bg-surface-hover rounded-lg">
                  <div class="flex items-center space-x-3">
                    <div class={`w-8 h-8 rounded-lg flex items-center justify-center ${
                      transaction.category === 'Food Delivery' ? 'bg-accent-error/20' :
                      transaction.category === 'Groceries' ? 'bg-accent-success/20' :
                      transaction.category === 'Pet Care' ? 'bg-accent-warning/20' :
                      'bg-accent-primary/20'
                    }`}>
                      <span class="text-sm">
                        {transaction.category === 'Food Delivery' ? 'üçï' :
                         transaction.category === 'Groceries' ? 'üõí' :
                         transaction.category === 'Pet Care' ? 'üê±' : 'üí≥'}
                      </span>
                    </div>
                    <div>
                      <p class="font-medium text-text-primary text-sm">{transaction.description.substring(0, 30)}...</p>
                      <div class="flex items-center space-x-2 text-xs text-text-muted">
                        <span>{transaction.vendor}</span>
                        <span>‚Ä¢</span>
                        <span>{new Date(transaction.date).toLocaleDateString()}</span>
                      </div>
                    </div>
                  </div>
                  <div class="text-right">
                    <p class="font-semibold text-accent-error text-sm">‚Çπ{transaction.amount.toLocaleString()}</p>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>

        <!-- Job Search Financial Tracker -->
        <div class="card p-6 bg-gradient-to-r from-accent-warning/10 to-accent-error/10 border border-accent-warning/20 mb-8">
          <h3 class="text-lg font-semibold text-text-primary mb-4">üéØ Job Search Financial Strategy</h3>
          <div class="grid grid-cols-1 md:grid-cols-4 gap-6">
            <div class="text-center">
              <div class="text-3xl font-bold text-accent-warning mb-2">
                {runway.toFixed(1)}
              </div>
              <div class="text-sm text-text-muted">Months Remaining</div>
              <div class="text-xs text-text-secondary mt-1">At current spending</div>
            </div>
            
            <div class="text-center">
              <div class="text-3xl font-bold text-accent-primary mb-2">
                Jul 31
              </div>
              <div class="text-sm text-text-muted">Target Job Date</div>
              <div class="text-xs text-text-secondary mt-1">For September comfort</div>
            </div>
            
            <div class="text-3xl font-bold text-accent-success mb-2 text-center">
              ‚Çπ{(monthlyExpenses * 0.8).toLocaleString()}
            </div>
            <div class="text-sm text-text-muted text-center">Optimized Budget</div>
            <div class="text-xs text-text-secondary mt-1 text-center">20% reduction target</div>
          </div>
          
          <div class="mt-6 p-4 bg-accent-warning/10 rounded-lg">
            <p class="text-sm text-text-secondary">
              <strong class="text-accent-warning">Strategy:</strong> Your Y Combinator background + Web3 expertise positions you well. 
              Reduce MK Retail spending (‚Çπ3,053‚Üí‚Çπ1,500) and convenience purchases to extend runway to {(runway * 1.25).toFixed(1)} months.
            </p>
          </div>
        </div>

        <!-- AI Recommendations -->
        <div class="card p-6">
          <h3 class="text-lg font-semibold text-text-primary mb-4">üí° AI Budget Recommendations</h3>
          <div class="space-y-4">
            {budgetScore.recommendations.map((recommendation, index) => (
              <div class="flex items-start space-x-3 p-4 bg-accent-primary/10 border border-accent-primary/20 rounded-lg">
                <div class="w-6 h-6 bg-accent-primary rounded-full flex items-center justify-center flex-shrink-0 mt-0.5">
                  <span class="text-white text-xs font-bold">{index + 1}</span>
                </div>
                <p class="text-text-secondary text-sm">{recommendation}</p>
              </div>
            ))}
          </div>
        </div>
      </div>
    ) : (
      <!-- No Data State -->
      <div class="card p-8 text-center">
        <div class="w-16 h-16 bg-accent-warning/10 rounded-full flex items-center justify-center mx-auto mb-4">
          <span class="text-2xl">üí∞</span>
        </div>
        <h3 class="text-lg font-semibold text-text-primary mb-2">No Financial Data</h3>
        <p class="text-text-muted mb-6">
          Import your expense data, crypto holdings, and bank statements to start comprehensive financial tracking.
        </p>
        
        <div class="grid grid-cols-1 md:grid-cols-3 gap-4 max-w-md mx-auto mb-6">
          <div class="p-3 bg-surface-hover rounded-lg">
            <div class="text-2xl mb-1">üì±</div>
            <div class="text-sm font-medium text-text-primary">Expenses</div>
            <div class="text-xs text-text-muted">Zepto, Swiggy, Blinkit</div>
          </div>
          <div class="p-3 bg-surface-hover rounded-lg">
            <div class="text-2xl mb-1">‚Çø</div>
            <div class="text-sm font-medium text-text-primary">Crypto</div>
            <div class="text-xs text-text-muted">Trust Wallet portfolio</div>
          </div>
          <div class="p-3 bg-surface-hover rounded-lg">
            <div class="text-2xl mb-1">üè¶</div>
            <div class="text-sm font-medium text-text-primary">Banking</div>
            <div class="text-xs text-text-muted">Jupiter statements</div>
          </div>
        </div>
        
        <button 
          onclick="window.location.href = '/import'"
          class="px-6 py-3 bg-accent-warning text-white rounded-lg hover:bg-accent-warning/90 transition-colors"
        >
          Import Financial Data
        </button>
      </div>
    )}
  </div>
</DashboardLayout>

<script>
  // Import modal functionality
  document.getElementById('import-finance-btn')?.addEventListener('click', () => {
    window.location.href = '/import';
  });

  // Manual expense logging
  document.getElementById('log-expense-btn')?.addEventListener('click', () => {
    alert('üí∞ Manual expense logging feature coming soon! Import your data files for now.');
  });
</script>
