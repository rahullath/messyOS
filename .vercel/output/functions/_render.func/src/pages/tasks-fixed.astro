---
// src/pages/tasks.astro - Comprehensive Task Management
import DashboardLayout from '../layouts/DashboardLayout.astro';
import { createServerClient } from '../lib/supabase/server';

const supabase = createServerClient(Astro.cookies);

// Get the user from session
const { data: { user } } = await supabase.auth.getUser();

if (!user) {
  return Astro.redirect('/login');
}

// Fetch tasks with comprehensive data
const { data: tasks, error: tasksError } = await supabase
  .from('tasks')
  .select(`
    *,
    task_sessions(
      id, started_at, ended_at, duration, session_type, productivity_score, energy_level
    )
  `)
  .eq('user_id', user.id)
  .order('created_at', { ascending: false });

// Fetch active task session if any
const { data: activeSession } = await supabase
  .from('task_sessions')
  .select('*, tasks(title)')
  .eq('user_id', user.id)
  .is('ended_at', null)
  .single();

// Process tasks for display
const processedTasks = (tasks || []).map(task => {
  const sessions = task.task_sessions || [];
  const totalTime = sessions.reduce((sum, session) => sum + (session.duration || 0), 0);
  const avgProductivity = sessions.length > 0 
    ? sessions.reduce((sum, s) => sum + (s.productivity_score || 0), 0) / sessions.length 
    : 0;

  return {
    ...task,
    totalTimeSpent: totalTime,
    avgProductivity: Math.round(avgProductivity * 10) / 10,
    isOverdue: task.due_date && new Date(task.due_date) < new Date() && task.status !== 'completed',
    isDueToday: task.due_date && new Date(task.due_date).toDateString() === new Date().toDateString(),
    sessionCount: sessions.length
  };
});

// Task statistics
const stats = {
  total: processedTasks.length,
  completed: processedTasks.filter(t => t.status === 'completed').length,
  inProgress: processedTasks.filter(t => t.status === 'in_progress').length,
  overdue: processedTasks.filter(t => t.isOverdue).length,
  dueToday: processedTasks.filter(t => t.isDueToday).length,
  totalTimeToday: processedTasks
    .flatMap(t => t.task_sessions || [])
    .filter(s => s.started_at && new Date(s.started_at).toDateString() === new Date().toDateString())
    .reduce((sum, s) => sum + (s.duration || 0), 0)
};

// Group tasks by status
const tasksByStatus = {
  todo: processedTasks.filter(t => t.status === 'todo'),
  in_progress: processedTasks.filter(t => t.status === 'in_progress'),
  completed: processedTasks.filter(t => t.status === 'completed').slice(0, 5), // Show recent 5
  on_hold: processedTasks.filter(t => t.status === 'on_hold')
};

// Categories for the new task form
const categories = [
  'Work', 'Personal', 'Learning', 'Health', 'Finance', 'Creative', 'Social', 'Maintenance', 'Planning', 'Other'
];

const priorities = [
  { value: 'low', label: 'Low', color: 'text-accent-success' },
  { value: 'medium', label: 'Medium', color: 'text-accent-warning' },
  { value: 'high', label: 'High', color: 'text-accent-error' },
  { value: 'urgent', label: 'Urgent', color: 'text-red-600' }
];

function formatDuration(seconds) {
  if (!seconds) return '0m';
  const hours = Math.floor(seconds / 3600);
  const minutes = Math.floor((seconds % 3600) / 60);
  if (hours > 0) return `${hours}h ${minutes}m`;
  return `${minutes}m`;
}

function formatTime(timestamp) {
  if (!timestamp) return '';
  return new Date(timestamp).toLocaleTimeString('en-US', { 
    hour: '2-digit', 
    minute: '2-digit' 
  });
}

function formatDate(timestamp) {
  if (!timestamp) return '';
  return new Date(timestamp).toLocaleDateString('en-US', { 
    month: 'short', 
    day: 'numeric' 
  });
}
---

<DashboardLayout title="Tasks - MeshOS">
  <div class="space-y-8">
    <!-- Header with Active Timer -->
    <div class="flex items-center justify-between">
      <div>
        <h1 class="text-3xl font-semibold text-text-primary mb-2">Tasks</h1>
        <p class="text-text-secondary">
          Comprehensive task management with AI insights and time tracking
        </p>
      </div>
      
      <div class="flex items-center space-x-4">
        <!-- Active Timer Display -->
        {activeSession && (
          <div class="flex items-center space-x-3 px-4 py-2 bg-accent-success/10 border border-accent-success/20 rounded-lg">
            <div class="w-3 h-3 bg-accent-success rounded-full animate-pulse"></div>
            <div>
              <p class="text-sm font-medium text-accent-success">Active: {activeSession.tasks.title}</p>
              <p class="text-xs text-text-muted" id="active-timer">
                Started at {formatTime(activeSession.started_at)}
              </p>
            </div>
            <button 
              id="stop-timer-btn"
              data-task-id={activeSession.task_id}
              class="px-3 py-1 bg-accent-error text-white text-sm rounded hover:bg-accent-error/90"
            >
              Stop
            </button>
          </div>
        )}
        
        <!-- AI Task Assistant -->
        <button 
          id="ai-assistant-btn"
          class="flex items-center px-4 py-2 bg-gradient-to-r from-accent-primary to-accent-purple text-white rounded-lg hover:opacity-90 transition-opacity"
        >
          <span class="text-lg mr-2">ü§ñ</span>
          AI Assistant
        </button>
        
        <!-- New Task Button -->
        <button 
          id="new-task-btn"
          class="flex items-center px-4 py-2 bg-accent-primary text-white rounded-lg hover:bg-accent-primary/90 transition-colors"
        >
          <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
          </svg>
          New Task
        </button>
      </div>
    </div>

    <!-- Task Statistics -->
    <div class="grid grid-cols-1 md:grid-cols-6 gap-6">
      <div class="card p-4">
        <div class="flex items-center justify-between">
          <div>
            <p class="text-sm font-medium text-text-muted">Total Tasks</p>
            <p class="text-2xl font-semibold text-text-primary mt-1">{stats.total}</p>
          </div>
          <span class="text-2xl">üìã</span>
        </div>
      </div>

      <div class="card p-4">
        <div class="flex items-center justify-between">
          <div>
            <p class="text-sm font-medium text-text-muted">Completed</p>
            <p class="text-2xl font-semibold text-accent-success mt-1">{stats.completed}</p>
          </div>
          <span class="text-2xl">‚úÖ</span>
        </div>
      </div>

      <div class="card p-4">
        <div class="flex items-center justify-between">
          <div>
            <p class="text-sm font-medium text-text-muted">In Progress</p>
            <p class="text-2xl font-semibold text-accent-warning mt-1">{stats.inProgress}</p>
          </div>
          <span class="text-2xl">‚ö°</span>
        </div>
      </div>

      <div class="card p-4">
        <div class="flex items-center justify-between">
          <div>
            <p class="text-sm font-medium text-text-muted">Overdue</p>
            <p class="text-2xl font-semibold text-accent-error mt-1">{stats.overdue}</p>
          </div>
          <span class="text-2xl">‚ö†Ô∏è</span>
        </div>
      </div>

      <div class="card p-4">
        <div class="flex items-center justify-between">
          <div>
            <p class="text-sm font-medium text-text-muted">Due Today</p>
            <p class="text-2xl font-semibold text-accent-purple mt-1">{stats.dueToday}</p>
          </div>
          <span class="text-2xl">üìÖ</span>
        </div>
      </div>

      <div class="card p-4">
        <div class="flex items-center justify-between">
          <div>
            <p class="text-sm font-medium text-text-muted">Time Today</p>
            <p class="text-2xl font-semibold text-text-primary mt-1">{formatDuration(stats.totalTimeToday)}</p>
          </div>
          <span class="text-2xl">‚è±Ô∏è</span>
        </div>
      </div>
    </div>

    <!-- Task Board -->
    <div class="grid grid-cols-1 lg:grid-cols-4 gap-6">
      <!-- To Do Column -->
      <div class="space-y-4">
        <div class="flex items-center justify-between">
          <h2 class="text-lg font-semibold text-text-primary">To Do</h2>
          <span class="px-2 py-1 bg-surface text-xs rounded">{tasksByStatus.todo.length}</span>
        </div>
        
        <div class="space-y-3 max-h-96 overflow-y-auto">
          {tasksByStatus.todo.map((task) => (
            <div key={task.id} class="task-card card p-4 hover:bg-surface-hover transition-colors cursor-pointer" data-task-id={task.id}>
              <div class="flex items-start justify-between mb-2">
                <h3 class="font-medium text-text-primary text-sm">{task.title}</h3>
                <div class="flex items-center space-x-1">
                  <span class={`w-2 h-2 rounded-full ${
                    task.priority === 'urgent' ? 'bg-red-600' :
                    task.priority === 'high' ? 'bg-accent-error' :
                    task.priority === 'medium' ? 'bg-accent-warning' : 'bg-accent-success'
                  }`}></div>
                  {task.isOverdue && <span class="text-xs text-accent-error">‚ö†Ô∏è</span>}
                  {task.isDueToday && <span class="text-xs text-accent-warning">üìÖ</span>}
                </div>
              </div>
              
              {task.description && (
                <p class="text-xs text-text-muted mb-2 line-clamp-2">{task.description}</p>
              )}
              
              <div class="flex items-center justify-between text-xs text-text-muted">
                <span class="px-2 py-1 bg-surface rounded">{task.category}</span>
                <div class="flex items-center space-x-2">
                  {task.estimated_duration && (
                    <span>‚è±Ô∏è {formatDuration(task.estimated_duration * 60)}</span>
                  )}
                  {task.due_date && (
                    <span>üìÖ {formatDate(task.due_date)}</span>
                  )}
                </div>
              </div>
              
              <div class="flex items-center justify-between mt-3">
                <button 
                  class="start-timer-btn px-3 py-1 bg-accent-success text-white text-xs rounded hover:bg-accent-success/90"
                  data-task-id={task.id}
                  data-task-title={task.title}
                >
                  ‚ñ∂Ô∏è Start
                </button>
                <button 
                  class="edit-task-btn text-text-muted hover:text-text-primary"
                  data-task-id={task.id}
                >
                  ‚úèÔ∏è
                </button>
              </div>
            </div>
          ))}
        </div>
      </div>

      <!-- In Progress Column -->
      <div class="space-y-4">
        <div class="flex items-center justify-between">
          <h2 class="text-lg font-semibold text-text-primary">In Progress</h2>
          <span class="px-2 py-1 bg-surface text-xs rounded">{tasksByStatus.in_progress.length}</span>
        </div>
        
        <div class="space-y-3 max-h-96 overflow-y-auto">
          {tasksByStatus.in_progress.map((task) => (
            <div key={task.id} class="task-card card p-4 bg-accent-warning/5 border border-accent-warning/20 hover:bg-accent-warning/10 transition-colors cursor-pointer" data-task-id={task.id}>
              <div class="flex items-start justify-between mb-2">
                <h3 class="font-medium text-text-primary text-sm">{task.title}</h3>
                <div class="flex items-center space-x-1">
                  <div class="w-2 h-2 bg-accent-warning rounded-full animate-pulse"></div>
                </div>
              </div>
              
              {task.description && (
                <p class="text-xs text-text-muted mb-2 line-clamp-2">{task.description}</p>
              )}
              
              <div class="flex items-center justify-between text-xs text-text-muted mb-2">
                <span class="px-2 py-1 bg-surface rounded">{task.category}</span>
                <span>‚è±Ô∏è {formatDuration(task.totalTimeSpent)}</span>
              </div>
              
              {task.avgProductivity > 0 && (
                <div class="mb-2">
                  <div class="flex items-center justify-between text-xs">
                    <span class="text-text-muted">Productivity</span>
                    <span class="text-text-primary">{task.avgProductivity}/10</span>
                  </div>
                  <div class="w-full bg-surface rounded-full h-1 mt-1">
                    <div 
                      class="bg-accent-success h-1 rounded-full" 
                      style={`width: ${task.avgProductivity * 10}%`}
                    ></div>
                  </div>
                </div>
              )}
              
              <div class="flex items-center justify-between">
                <button 
                  class="complete-task-btn px-3 py-1 bg-accent-success text-white text-xs rounded hover:bg-accent-success/90"
                  data-task-id={task.id}
                >
                  ‚úÖ Complete
                </button>
                <button 
                  class="pause-task-btn px-3 py-1 bg-accent-warning text-white text-xs rounded hover:bg-accent-warning/90"
                  data-task-id={task.id}
                >
                  ‚è∏Ô∏è Pause
                </button>
              </div>
            </div>
          ))}
        </div>
      </div>

      <!-- On Hold Column -->
      <div class="space-y-4">
        <div class="flex items-center justify-between">
          <h2 class="text-lg font-semibold text-text-primary">On Hold</h2>
          <span class="px-2 py-1 bg-surface text-xs rounded">{tasksByStatus.on_hold.length}</span>
        </div>
        
        <div class="space-y-3 max-h-96 overflow-y-auto">
          {tasksByStatus.on_hold.map((task) => (
            <div key={task.id} class="task-card card p-4 bg-surface-hover opacity-75 hover:opacity-100 transition-opacity cursor-pointer" data-task-id={task.id}>
              <div class="flex items-start justify-between mb-2">
                <h3 class="font-medium text-text-primary text-sm">{task.title}</h3>
                <span class="text-xs text-text-muted">‚è∏Ô∏è</span>
              </div>
              
              {task.description && (
                <p class="text-xs text-text-muted mb-2 line-clamp-2">{task.description}</p>
              )}
              
              <div class="flex items-center justify-between text-xs text-text-muted">
                <span class="px-2 py-1 bg-surface rounded">{task.category}</span>
                <button 
                  class="resume-task-btn text-accent-primary hover:text-accent-primary/80"
                  data-task-id={task.id}
                >
                  ‚ñ∂Ô∏è Resume
                </button>
              </div>
            </div>
          ))}
        </div>
      </div>

      <!-- Completed Column -->
      <div class="space-y-4">
        <div class="flex items-center justify-between">
          <h2 class="text-lg font-semibold text-text-primary">Completed</h2>
          <span class="px-2 py-1 bg-surface text-xs rounded">{tasksByStatus.completed.length}</span>
        </div>
        
        <div class="space-y-3 max-h-96 overflow-y-auto">
          {tasksByStatus.completed.map((task) => (
            <div key={task.id} class="task-card card p-4 bg-accent-success/5 border border-accent-success/20 opacity-75 hover:opacity-100 transition-opacity cursor-pointer" data-task-id={task.id}>
              <div class="flex items-start justify-between mb-2">
                <h3 class="font-medium text-text-primary text-sm line-through">{task.title}</h3>
                <span class="text-xs text-accent-success">‚úÖ</span>
              </div>
              
              <div class="flex items-center justify-between text-xs text-text-muted">
                <span class="px-2 py-1 bg-surface rounded">{task.category}</span>
                <span>‚è±Ô∏è {formatDuration(task.totalTimeSpent)}</span>
              </div>
              
              {task.completed_at && (
                <p class="text-xs text-text-muted mt-2">
                  Completed {formatDate(task.completed_at)}
                </p>
              )}
            </div>
          ))}
        </div>
      </div>
    </div>

    <!-- New Task Modal -->
    <div id="new-task-modal" class="fixed inset-0 bg-black/50 hidden items-center justify-center z-50 p-4">
      <div class="bg-surface rounded-lg w-full max-w-2xl max-h-[90vh] overflow-y-auto">
        <div class="p-6">
          <div class="flex items-center justify-between mb-6">
            <h3 class="text-2xl font-semibold text-text-primary">Create New Task</h3>
            <button id="close-task-modal" class="text-text-muted hover:text-text-primary">
              <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
              </svg>
            </button>
          </div>
          
          <form id="new-task-form" class="space-y-6">
            <!-- Essential Fields -->
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div class="md:col-span-2">
                <label class="block text-sm font-medium text-text-primary mb-2">
                  Task Title <span class="text-accent-error">*</span>
                </label>
                <input 
                  type="text" 
                  name="title" 
                  required
                  class="w-full px-3 py-2 bg-background border border-border rounded-lg text-text-primary focus:outline-none focus:ring-2 focus:ring-accent-primary focus:border-transparent"
                  placeholder="What needs to be done?"
                />
              </div>
              
              <div>
                <label class="block text-sm font-medium text-text-primary mb-2">
                  Category <span class="text-accent-error">*</span>
                </label>
                <select 
                  name="category" 
                  required
                  class="w-full px-3 py-2 bg-background border border-border rounded-lg text-text-primary focus:outline-none focus:ring-2 focus:ring-accent-primary focus:border-transparent"
                >
                  {categories.map(cat => (
                    <option key={cat} value={cat}>{cat}</option>
                  ))}
                </select>
              </div>
              
              <div>
                <label class="block text-sm font-medium text-text-primary mb-2">
                  Priority <span class="text-accent-error">*</span>
                </label>
                <select 
                  name="priority" 
                  required
                  class="w-full px-3 py-2 bg-background border border-border rounded-lg text-text-primary focus:outline-none focus:ring-2 focus:ring-accent-primary focus:border-transparent"
                >
                  {priorities.map(p => (
                    <option key={p.value} value={p.value}>{p.label}</option>
                  ))}
                </select>
              </div>
            </div>
            
            <div>
              <label class="block text-sm font-medium text-text-primary mb-2">Description</label>
              <textarea 
                name="description" 
                rows="3"
                class="w-full px-3 py-2 bg-background border border-border rounded-lg text-text-primary focus:outline-none focus:ring-2 focus:ring-accent-primary focus:border-transparent"
                placeholder="Describe the task in detail..."
              ></textarea>
            </div>

            <!-- Time & Scheduling -->
            <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div>
                <label class="block text-sm font-medium text-text-primary mb-2">Estimated Duration</label>
                <select 
                  name="estimated_duration"
                  class="w-full px-3 py-2 bg-background border border-border rounded-lg text-text-primary focus:outline-none focus:ring-2 focus:ring-accent-primary focus:border-transparent"
                >
                  <option value="">Select duration</option>
                  <option value="15">15 minutes</option>
                  <option value="30">30 minutes</option>
                  <option value="60">1 hour</option>
                  <option value="120">2 hours</option>
                  <option value="240">4 hours</option>
                  <option value="480">8 hours</option>
                </select>
              </div>
              
              <div>
                <label class="block text-sm font-medium text-text-primary mb-2">Due Date</label>
                <input 
                  type="datetime-local" 
                  name="due_date"
                  class="w-full px-3 py-2 bg-background border border-border rounded-lg text-text-primary focus:outline-none focus:ring-2 focus:ring-accent-primary focus:border-transparent"
                />
              </div>
              
              <div>
                <label class="block text-sm font-medium text-text-primary mb-2">Schedule For</label>
                <input 
                  type="datetime-local" 
                  name="scheduled_for"
                  class="w-full px-3 py-2 bg-background border border-border rounded-lg text-text-primary focus:outline-none focus:ring-2 focus:ring-accent-primary focus:border-transparent"
                />
              </div>
            </div>

            <!-- Context & Energy -->
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label class="block text-sm font-medium text-text-primary mb-2">Energy Required</label>
                <select 
                  name="energy_required"
                  class="w-full px-3 py-2 bg-background border border-border rounded-lg text-text-primary focus:outline-none focus:ring-2 focus:ring-accent-primary focus:border-transparent"
                >
                  <option value="low">Low Energy</option>
                  <option value="medium" selected>Medium Energy</option>
                  <option value="high">High Energy</option>
                </select>
              </div>
              
              <div>
                <label class="block text-sm font-medium text-text-primary mb-2">Complexity</label>
                <select 
                  name="complexity"
                  class="w-full px-3 py-2 bg-background border border-border rounded-lg text-text-primary focus:outline-none focus:ring-2 focus:ring-accent-primary focus:border-transparent"
                >
                  <option value="simple">Simple</option>
                  <option value="moderate" selected>Moderate</option>
                  <option value="complex">Complex</option>
                </select>
              </div>
            </div>

            <!-- Optional Context -->
            <div class="border-t border-border pt-4">
              <button 
                type="button" 
                id="toggle-advanced"
                class="text-accent-primary hover:text-accent-primary/80 text-sm mb-4"
              >
                ‚ñº Advanced Options (Optional)
              </button>
              
              <div id="advanced-options" class="hidden space-y-4">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label class="block text-sm font-medium text-text-primary mb-2">Location</label>
                    <input 
                      type="text" 
                      name="location"
                      class="w-full px-3 py-2 bg-background border border-border rounded-lg text-text-primary focus:outline-none focus:ring-2 focus:ring-accent-primary focus:border-transparent"
                      placeholder="Home, Office, Cafe..."
                    />
                  </div>
                  
                  <div>
                    <label class="block text-sm font-medium text-text-primary mb-2">Tags</label>
                    <input 
                      type="text" 
                      name="tags"
                      class="w-full px-3 py-2 bg-background border border-border rounded-lg text-text-primary focus:outline-none focus:ring-2 focus:ring-accent-primary focus:border-transparent"
                      placeholder="urgent, creative, meeting (comma separated)"
                    />
                  </div>
                </div>
                
                <div>
                  <label class="block text-sm font-medium text-text-primary mb-2">Context</label>
                  <div class="grid grid-cols-2 md:grid-cols-4 gap-2">
                    {['focused', 'collaborative', 'creative', 'routine', 'learning', 'communication', 'planning', 'review'].map(ctx => (
                      <label key={ctx} class="flex items-center space-x-2">
                        <input type="checkbox" name="context" value={ctx} class="rounded border-border" />
                        <span class="text-sm text-text-secondary capitalize">{ctx}</span>
                      </label>
                    ))}
                  </div>
                </div>
                
                <div class="flex items-center space-x-4">
                  <label class="flex items-center space-x-2">
                    <input type="checkbox" name="email_reminders" class="rounded border-border" />
                    <span class="text-sm text-text-secondary">Email reminders</span>
                  </label>
                </div>
              </div>
            </div>

            <!-- Submit Buttons -->
            <div class="flex items-center justify-end space-x-3 pt-4 border-t border-border">
              <button 
                type="button" 
                id="cancel-task"
                class="px-4 py-2 text-text-secondary hover:text-text-primary transition-colors"
              >
                Cancel
              </button>
              <button 
                type="submit"
                class="px-6 py-2 bg-accent-primary text-white rounded-lg hover:bg-accent-primary/90 transition-colors"
              >
                Create Task
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>

    <!-- AI Assistant Modal -->
    <div id="ai-assistant-modal" class="fixed inset-0 bg-black/50 hidden items-center justify-center z-50 p-4">
      <div class="bg-surface rounded-lg w-full max-w-4xl max-h-[90vh] overflow-y-auto">
        <div class="p-6">
          <div class="flex items-center justify-between mb-6">
            <h3 class="text-2xl font-semibold text-text-primary">ü§ñ AI Task Assistant</h3>
            <button id="close-ai-assistant" class="text-text-muted hover:text-text-primary">
              <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
              </svg>
            </button>
          </div>
          
          <div id="ai-assistant-content">
            <div class="text-center py-8">
              <div class="animate-spin w-8 h-8 border-2 border-accent-primary border-t-transparent rounded-full mx-auto mb-4"></div>
              <p class="text-text-secondary">AI is analyzing your tasks and productivity patterns...</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</DashboardLayout>

<script>
  console.log('Tasks page loaded successfully');
  
  // Modal handlers
  document.getElementById('new-task-btn')?.addEventListener('click', () => {
    document.getElementById('new-task-modal')?.classList.remove('hidden');
    document.getElementById('new-task-modal')?.classList.add('flex');
  });

  document.getElementById('close-task-modal')?.addEventListener('click', () => {
    document.getElementById('new-task-modal')?.classList.add('hidden');
    document.getElementById('new-task-modal')?.classList.remove('flex');
  });

  document.getElementById('ai-assistant-btn')?.addEventListener('click', () => {
    document.getElementById('ai-assistant-modal')?.classList.remove('hidden');
    document.getElementById('ai-assistant-modal')?.classList.add('flex');
    loadAIAnalysis('productivity_analysis');
  });

  document.getElementById('close-ai-assistant')?.addEventListener('click', () => {
    document.getElementById('ai-assistant-modal')?.classList.add('hidden');
    document.getElementById('ai-assistant-modal')?.classList.remove('flex');
  });

  // Advanced options toggle
  document.getElementById('toggle-advanced')?.addEventListener('click', () => {
    const advanced = document.getElementById('advanced-options');
    const toggle = document.getElementById('toggle-advanced');
    if (advanced?.classList.contains('hidden')) {
      advanced.classList.remove('hidden');
      toggle.textContent = '‚ñ≤ Advanced Options (Optional)';
    } else {
      advanced?.classList.add('hidden');
      toggle.textContent = '‚ñº Advanced Options (Optional)';
    }
  });

  // Task action handlers
  document.addEventListener('click', async (e) => {
    const target = e.target;
    
    // Start timer
    if (target.classList.contains('start-timer-btn')) {
      const taskId = target.getAttribute('data-task-id');
      const taskTitle = target.getAttribute('data-task-title');
      
      try {
        const response = await fetch(`/api/tasks/${taskId}/timer`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ action: 'start' })
        });

        const result = await response.json();
        
        if (result.success) {
          showToast(`Timer started for: ${taskTitle}`, 'success');
          window.location.reload();
        } else {
          showToast('Error: ' + result.error, 'error');
        }
      } catch (error) {
        showToast('Network error starting timer', 'error');
      }
    }
    
    // Complete task
    if (target.classList.contains('complete-task-btn')) {
      const taskId = target.getAttribute('data-task-id');
      
      try {
        const response = await fetch(`/api/tasks/${taskId}`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ 
            status: 'completed', 
            completed_at: new Date().toISOString() 
          })
        });

        const result = await response.json();
        
        if (result.success) {
          showToast('Task completed!', 'success');
          window.location.reload();
        } else {
          showToast('Error: ' + result.error, 'error');
        }
      } catch (error) {
        showToast('Network error completing task', 'error');
      }
    }
    
    // Pause task
    if (target.classList.contains('pause-task-btn')) {
      const taskId = target.getAttribute('data-task-id');
      
      try {
        const response = await fetch(`/api/tasks/${taskId}`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ status: 'on_hold' })
        });

        const result = await response.json();
        
        if (result.success) {
          showToast('Task paused', 'success');
          window.location.reload();
        } else {
          showToast('Error: ' + result.error, 'error');
        }
      } catch (error) {
        showToast('Network error pausing task', 'error');
      }
    }
    
    // Resume task
    if (target.classList.contains('resume-task-btn')) {
      const taskId = target.getAttribute('data-task-id');
      
      try {
        const response = await fetch(`/api/tasks/${taskId}`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ status: 'todo' })
        });

        const result = await response.json();
        
        if (result.success) {
          showToast('Task resumed', 'success');
          window.location.reload();
        } else {
          showToast('Error: ' + result.error, 'error');
        }
      } catch (error) {
        showToast('Network error resuming task', 'error');
      }
    }
    
    // Stop timer
    if (target.id === 'stop-timer-btn') {
      const productivity = prompt('Rate your productivity (1-10):');
      const energy = prompt('Rate your energy level (1-10):');
      const completed = confirm('Did you complete the task?');
      
      const activeTaskId = target.getAttribute('data-task-id');
      
      try {
        const response = await fetch(`/api/tasks/${activeTaskId}/timer`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ 
            action: 'stop',
            productivity_score: productivity ? parseInt(productivity) : undefined,
            energy_level: energy ? parseInt(energy) : undefined,
            task_completed: completed
          })
        });

        const result = await response.json();
        
        if (result.success) {
          showToast(`Session completed! Duration: ${result.duration} minutes`, 'success');
          window.location.reload();
        } else {
          showToast('Error: ' + result.error, 'error');
        }
      } catch (error) {
        showToast('Network error stopping timer', 'error');
      }
    }
  });

  // Form submission
  document.getElementById('new-task-form')?.addEventListener('submit', async (e) => {
    e.preventDefault();
    const formData = new FormData(e.target);
    
    // Process context checkboxes
    const context = [];
    formData.getAll('context').forEach(ctx => context.push(ctx));
    
    const taskData = {
      title: formData.get('title'),
      description: formData.get('description'),
      category: formData.get('category'),
      priority: formData.get('priority'),
      estimated_duration: formData.get('estimated_duration') ? parseInt(formData.get('estimated_duration')) : null,
      due_date: formData.get('due_date') || null,
      scheduled_for: formData.get('scheduled_for') || null,
      energy_required: formData.get('energy_required'),
      complexity: formData.get('complexity'),
      location: formData.get('location'),
      tags: formData.get('tags') ? formData.get('tags').split(',').map(tag => tag.trim()) : [],
      context,
      email_reminders: formData.get('email_reminders') === 'on'
    };

    try {
      const response = await fetch('/api/tasks', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(taskData)
      });

      const result = await response.json();
      
      if (result.success) {
        showToast('Task created successfully!', 'success');
        window.location.reload();
      } else {
        showToast('Error: ' + result.error, 'error');
      }
    } catch (error) {
      showToast('Network error creating task', 'error');
    }
  });

  // AI Assistant functionality
  async function loadAIAnalysis(type) {
    const content = document.getElementById('ai-assistant-content');
    content.innerHTML = `
      <div class="text-center py-8">
        <div class="animate-spin w-8 h-8 border-2 border-accent-primary border-t-transparent rounded-full mx-auto mb-4"></div>
        <p class="text-text-secondary">AI is analyzing your ${type.replace('_', ' ')}...</p>
      </div>
    `;

    try {
      const response = await fetch('/api/tasks/ai-assistant', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ type })
      });

      const result = await response.json();
      
      if (result.success) {
        renderAIAnalysis(result.analysis, type);
      } else {
        content.innerHTML = `<p class="text-accent-error">Failed to load AI analysis: ${result.error}</p>`;
      }
    } catch (error) {
      content.innerHTML = `<p class="text-accent-error">Network error loading AI analysis</p>`;
    }
  }

  function renderAIAnalysis(analysis, type) {
    const content = document.getElementById('ai-assistant-content');
    let html = `
      <div class="space-y-6">
        <div class="flex space-x-2 mb-6">
          <button onclick="loadAIAnalysis('productivity_analysis')" class="px-4 py-2 bg-accent-primary text-white rounded hover:bg-accent-primary/90">
            Productivity Analysis
          </button>
          <button onclick="loadAIAnalysis('task_prioritization')" class="px-4 py-2 bg-accent-success text-white rounded hover:bg-accent-success/90">
            Task Prioritization
          </button>
          <button onclick="loadAIAnalysis('time_blocking')" class="px-4 py-2 bg-accent-purple text-white rounded hover:bg-accent-purple/90">
            Time Blocking
          </button>
        </div>
    `;

    if (analysis.insights) {
      html += `
        <div>
          <h4 class="text-lg font-semibold text-text-primary mb-3">üìä Insights</h4>
          <div class="space-y-3">
            ${analysis.insights.map(insight => `
              <div class="p-4 bg-accent-primary/10 rounded-lg">
                <h5 class="font-medium text-text-primary">${insight.title}</h5>
                <p class="text-text-secondary text-sm mt-1">${insight.description}</p>
                ${insight.recommendation ? `<p class="text-accent-primary text-sm mt-2 font-medium">üí° ${insight.recommendation}</p>` : ''}
              </div>
            `).join('')}
          </div>
        </div>
      `;
    }

    if (analysis.optimizations) {
      html += `
        <div>
          <h4 class="text-lg font-semibold text-text-primary mb-3">üöÄ Optimizations</h4>
          <div class="space-y-3">
            ${analysis.optimizations.map(opt => `
              <div class="p-4 bg-accent-success/10 rounded-lg">
                <h5 class="font-medium text-text-primary">${opt.area}</h5>
                <p class="text-text-secondary text-sm mt-1">${opt.current_issue}</p>
                <p class="text-accent-success text-sm mt-2 font-medium">‚úÖ ${opt.solution}</p>
                <p class="text-text-muted text-xs mt-1">Expected: ${opt.expected_impact} | Difficulty: ${opt.difficulty}</p>
              </div>
            `).join('')}
          </div>
        </div>
      `;
    }

    if (analysis.focus_suggestions) {
      html += `
        <div>
          <h4 class="text-lg font-semibold text-text-primary mb-3">üéØ Focus Suggestions</h4>
          <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div class="p-4 bg-accent-warning/10 rounded-lg">
              <h5 class="font-medium text-text-primary">Today</h5>
              <p class="text-text-secondary text-sm mt-1">${analysis.focus_suggestions.today}</p>
            </div>
            <div class="p-4 bg-accent-warning/10 rounded-lg">
              <h5 class="font-medium text-text-primary">This Week</h5>
              <p class="text-text-secondary text-sm mt-1">${analysis.focus_suggestions.this_week}</p>
            </div>
            <div class="p-4 bg-accent-purple/10 rounded-lg">
              <h5 class="font-medium text-text-primary">Energy</h5>
              <p class="text-text-secondary text-sm mt-1">${analysis.focus_suggestions.energy_optimization}</p>
            </div>
          </div>
        </div>
      `;
    }

    html += '</div>';
    content.innerHTML = html;
  }

  function showToast(message, type) {
    const toast = document.createElement('div');
    toast.className = `fixed top-4 right-4 px-4 py-2 rounded-lg shadow-lg z-50 text-white ${
      type === 'success' ? 'bg-green-600' :
      type === 'error' ? 'bg-red-600' : 'bg-yellow-600'
    }`;
    toast.textContent = message;
    document.body.appendChild(toast);
    
    setTimeout(() => {
      toast.remove();
    }, 3000);
  }

  // Make functions global for onclick handlers
  window.loadAIAnalysis = loadAIAnalysis;
</script>
</DashboardLayout>